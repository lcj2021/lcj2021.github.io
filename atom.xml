<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liucj&#39;s Harbour</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-22T10:35:07.448Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录 - 看番记录</title>
    <link href="http://example.com/2023/07/22/%E8%AE%B0%E5%BD%95%20-%20%E7%9C%8B%E7%95%AA%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2023/07/22/%E8%AE%B0%E5%BD%95%20-%20%E7%9C%8B%E7%95%AA%E8%AE%B0%E5%BD%95/</id>
    <published>2023-07-21T16:00:00.000Z</published>
    <updated>2023-07-22T10:35:07.448Z</updated>
    
    <content type="html"><![CDATA[<p>备注</p><blockquote><p>A叔: Animenzzz</p><p>猪仔: 和音社-猪仔很忙</p><p>P大: Phyxinon</p></blockquote><h2 id="已看"><a href="#已看" class="headerlink" title="已看"></a>已看</h2><p><strong>你的名字</strong></p><blockquote><p>OP &amp; ED: 梦灯笼 (黄昏之时)</p><p>OST: sparkle火花 (A叔), 前前前世 (A叔), 三叶的主题曲</p></blockquote><p>火影忍者 (TV 1-720集)</p><blockquote><p>OP: Sign, silhouette剪影 (A叔)</p></blockquote><p>继母的拖油瓶是我的前女友</p><p>剃须，然后捡到女高中生</p><p>青春猪头少年不会梦到兔女郎学姐</p><blockquote><p>ED: 不可思議のカルテ</p></blockquote><p>尸体派对</p><p>青春猪头少年不会梦到怀梦美少女</p><p>辉夜大小姐想让我告白 (天才们的恋爱头脑战) S1</p><p>Charlotte</p><p><strong>四月是你的谎言</strong></p><blockquote><p>OP: <strong>若能绽放光芒</strong> (A叔), 七色交响曲</p><p>ED: <strong>オレンジ Orange</strong> (猪仔)</p><p>OST: 私の嘘, Again, 弟弟一般的存在</p><p>古典: 爱的忧伤, 冬风, 肖邦第一叙事曲, 圣桑:引子与回旋</p></blockquote><p><strong>天气之子</strong></p><blockquote><p>OST: <strong>Grand Escape</strong> (A叔, P大)</p></blockquote><p>通往夏天的隧道（难懂）</p><p>辉夜大小姐想让我告白 S2</p><p><strong>鬼灭之刃 立志篇</strong></p><blockquote><p>OP: 红莲华</p><p>OST: 灶门炭治郎之歌</p></blockquote><p>鬼灭之刃 无限列车篇</p><p>鬼灭之刃 游郭篇</p><p>看得见的女孩</p><p>鬼灭之刃 锻刀村篇</p><p><strong>紫罗兰永恒花园 (1-3集 + 外传 + 4-6集)</strong></p><blockquote><p>OP: <strong>Sincerely</strong> (A叔, 猪仔)</p><p>ED: <strong>みちしるべ路标</strong> (A叔)</p></blockquote><p>比宇宙还远的地方 (1-8集)</p><h2 id="未看"><a href="#未看" class="headerlink" title="未看"></a>未看</h2><ul><li><input disabled="" type="checkbox"> 辉夜大小姐想让我告白 S3</li><li><input disabled="" type="checkbox"> 辉夜大小姐想让我告白 剧场版 初吻不会结束</li><li><input disabled="" type="checkbox"> 我的青春恋爱物语果然有问题</li><li><input disabled="" type="checkbox"> 轻音少女</li><li><input disabled="" type="checkbox"> 路人女主的养成方法</li><li><input disabled="" type="checkbox"> 冰菓</li><li><input disabled="" type="checkbox"> 中二病也要谈恋爱</li><li><input disabled="" type="checkbox"> 工作细胞</li><li><input disabled="" type="checkbox"> 堀与宫村</li><li><input disabled="" type="checkbox"> 干物妹小埋</li><li><input disabled="" type="checkbox"> 钢之炼金术师</li><li><input disabled="" type="checkbox"> 月色真美</li><li><input disabled="" type="checkbox"> 天使降临到我身边</li><li><input disabled="" type="checkbox"> 吹响! 上低音号</li><li><input disabled="" type="checkbox"> 小林家的龙女仆 12季</li><li><input disabled="" type="checkbox"> 逆转裁判 12季</li><li><input disabled="" type="checkbox"> Jose与虎与鱼</li><li><input disabled="" type="checkbox"> 天降之物</li><li><input disabled="" type="checkbox"> 甲铁城的卡巴内利</li><li><input disabled="" type="checkbox"> 从零开始的异世界生活</li><li><input disabled="" type="checkbox"> 关於我转生变成史莱姆这档事</li><li><input disabled="" type="checkbox"> blood c</li><li><input disabled="" type="checkbox"> 灵能百分百</li><li><input disabled="" type="checkbox"> 刀剑神域</li><li><input disabled="" type="checkbox"> fate</li><li><input disabled="" type="checkbox"> 一拳超人 one punch man</li><li><input disabled="" type="checkbox"> 咒术回战</li><li><input disabled="" type="checkbox"> 夏日重现</li><li><input disabled="" type="checkbox"> 一人之下</li><li><input disabled="" type="checkbox"> 罪恶王冠</li><li><input disabled="" type="checkbox"> EVA</li><li><input disabled="" type="checkbox"> 我推的孩子</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;备注&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A叔: Animenzzz&lt;/p&gt;
&lt;p&gt;猪仔: 和音社-猪仔很忙&lt;/p&gt;
&lt;p&gt;P大: Phyxinon&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;已看&quot;&gt;&lt;a href=&quot;#已看&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="记录" scheme="http://example.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>事记 - 在湖大的最后3天 (2023 06.14-06.16)</title>
    <link href="http://example.com/2023/06/16/%E4%BA%8B%E8%AE%B0%20-%20%E5%9C%A8%E6%B9%96%E5%A4%A7%E7%9A%84%E6%9C%80%E5%90%8E3%E5%A4%A9%20(2023%2006.14-06.16)/"/>
    <id>http://example.com/2023/06/16/%E4%BA%8B%E8%AE%B0%20-%20%E5%9C%A8%E6%B9%96%E5%A4%A7%E7%9A%84%E6%9C%80%E5%90%8E3%E5%A4%A9%20(2023%2006.14-06.16)/</id>
    <published>2023-06-15T16:00:00.000Z</published>
    <updated>2023-07-22T11:09:46.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="06-14-周三"><a href="#06-14-周三" class="headerlink" title="06.14 周三"></a>06.14 周三</h2><p>今天主要是早上八点左右到院楼门口拍年级集体毕业照. </p><h2 id="06-15-周四-小雨"><a href="#06-15-周四-小雨" class="headerlink" title="06.15 周四 小雨"></a>06.15 周四 小雨</h2><p>晚上跟jimmy去五一那边吃”在湖大最后的晚餐”, 事实上明晚还有一餐hhh. 可惜zzm得跟他家人一起聚餐, 不能一起来. zzm送我俩走到后湖阜埠河地铁站, 他就去跟他家人聚餐了. 我和jmy选了亚马逊, 其实也就是&lt;云计算技术&gt;这门课最后果哥请我, wf, 林st和武xy聚餐的地方. 在地铁出站时遇到了雷yl和陈sy, 刚想说巧, 谁知在亚马逊又遇到了. 这次来主要就吃了4-5杯冰淇淋, 巧克力, 荔枝, 芒果味. 人均150左右, 吃的很饱.</p><p>饭后我和jimmy在五一广场兜了个圈, 开始想去地下商城, 谁知几个入口都被堵死了, 只好作罢. 随后我提出走到湘江边上, 沿着大方向一直走, 路过了太平街. 这我才想起在开学第一天晚上我和老爸就来过, 行程与4年前形成了”首尾呼应”. 走到江边发现找不到地下隧道之类的到江岸, 又只好作罢. 最后我们走到万达广场, 从就近的地铁站回了宿舍.</p><h2 id="06-16-周五-毕业典礼-amp-学位授予-小雨"><a href="#06-16-周五-毕业典礼-amp-学位授予-小雨" class="headerlink" title="06.16 周五 (毕业典礼 &amp; 学位授予) 小雨"></a>06.16 周五 (毕业典礼 &amp; 学位授予) 小雨</h2><p>今天就是毕业典礼了, 也是在HNU的最后一天了. 早上六点多就起了床, 跟jmy和zzm俩一起坐地铁去, 咱穿的文化衫都是蓝色, 不过信息院的文化衫似乎质感有些差, 电气院的是棉的hhh. 毕业典礼上我和刘hp坐在一块, 才知道电气院已经有大佬发了CVPR, 是真的猛. 听毕业典礼的时候下了小雨, 不过座位上有雨衣所以问题不大. 典礼结束之后去大礼堂参加学位授予仪式, 路上遇到了zwling, 以后的stronghold in Beijing, hhh. 寒暄了几句便开始排队了. 授予仪式的时候我忘记向老师鞠躬了, 难顶. 学院的毕业礼物是一个学院形状的的箔片和一块鼠标垫. emmm…</p><p>学位授予弄完之后我就和8班一起拍了集体毕业照, 就在岳麓书院门口和大礼堂门口拍了几张. zzm和jmy等着我和他们一起拍毕业照, 可是这边的学位授予搞了太久, 还是没能一起拍成. 之后就和wf, 吴老师和夏老师4个一起在红楼门口, 信息院门口拍了几张.</p><p>中午回到宿舍睡了一下, 一睡就睡了好久, 以至于我赶过去院楼领双证的时候, wdy都已经快回到宿舍了. 这也是我最后一次来院楼了, 当我在院楼门口的升学去向和优秀毕设展板上看到自己的名字的时候, 一种自豪感油然而生, 这4年的光阴也算是没有虚度啊. 领完双证, 我就在彭老师开组会的教室门口等了大概40分钟. 跟彭老师和同门们一起在院楼2楼和院楼门口拍了毕业照. 一想到将来可能就基本没有机会见面了, 自然是难受. 彭老师说以后肯定会去上海, 我这才好受些. </p><p>在湖大吃的最后一餐, 我选择了师生缘二楼大碗饭的土豆牛肉, 并且没有打包带回宿舍. 四年前的情景仍历历在目: 到湖大的第一餐, 就是这个位置, 这道土豆牛肉. 这四年时间里, 食堂窗口换了又换, 幸运的是这家大碗饭还在. 真的很喜欢这种回到原点的感觉.</p><p>回到宿舍, 收拾剩下的床单被褥, 才发现根本无法随身带, 这时下棋了小雨. 我冒着雨狂奔着把东西抗下楼, 赶着最后一批顺丰寄回家. 临近出发, 我和舍友穿着学士服在我床前拍了几张照片. 临走前</p><p>此去经年, 顶峰相见!</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>TO HNU</p><blockquote><p>虽然你和我想象中有些不同，更加喧嚣，浮躁，甚至治安差，成天在施工。似乎是欲扬先抑的标准开头，但确实是这样呢。<br>故事的开始，我由于疾病不顾考核翘晚自习，报复式地在疫情期间玩了数千小时的游戏。直到转专业通知下发，那时我便知道，我…得开始奔跑起来了。<br>为了不将遗憾带随我毕业，我不顾他人眼光，做了很多事情。拿着刚及格的高数成绩去转专业，经常地翘课去各大医院求医做检查，从弹力带到负重的引体向上；重新捡起大一时敬畏的算法竞赛，忍受着寂寞在暑假留校训练，无头苍蝇一般尝试着各种疯狂idea并测试效果…<br>将要跑到终点时，这些场景真的像走马灯一样：期末周和同学在研讨空间的争分夺秒，申请加入课题组时的紧张和期待，“高数一百”成立那晚的树下会议，跟舍友赶早八的3人电瓶车，一个也没能完成的“510大四计划”，看鬼灭之刃时在舍友面前中二地重复各种呼吸的名字，总是停留在理论却从未实践的发型与穿搭；和发小在后湖夜谈喝下了第一口酒……<br>好生气，没能找回研楼弄丢的耳机和综楼被偷的自行车；<br>好满足，你的每个角落我大概都逛了个遍了吧；<br>好遗憾，四年里没能欣赏到湘江的烟花，也没能遇到她；<br>好惭愧，起初我总是抱怨着你的种种不好；<br>好开心，我遇到了510的三位兄弟，好幸运，能加入到心仪的课题组和优秀的老师同学们讨论，好给力，我结识了两位实力强劲的队友；好荣幸，能和大佬们一起在考前突击…..果然，是你真的太好了。我相信几十年后的我重温这段时光，他会自豪地说:跟你度过的这4年没有遗憾。</p><p>2023.06.16 长沙-&gt;广州</p></blockquote><p>回忆于：07.22日15点30分<br>BGM: &lt;みちしるべ-路标&gt; 紫罗兰永恒花园TV ED</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;06-14-周三&quot;&gt;&lt;a href=&quot;#06-14-周三&quot; class=&quot;headerlink&quot; title=&quot;06.14 周三&quot;&gt;&lt;/a&gt;06.14 周三&lt;/h2&gt;&lt;p&gt;今天主要是早上八点左右到院楼门口拍年级集体毕业照. &lt;/p&gt;
&lt;h2 id=&quot;06-15-周</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux - Linux Cheatsheet</title>
    <link href="http://example.com/2023/04/10/Linux%20-%20Linux%20cheatsheet/"/>
    <id>http://example.com/2023/04/10/Linux%20-%20Linux%20cheatsheet/</id>
    <published>2023-04-09T16:00:00.000Z</published>
    <updated>2023-04-17T08:10:56.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看内存情况"><a href="#查看内存情况" class="headerlink" title="查看内存情况"></a>查看内存情况</h2><p>用<code>top</code>指令能看到kb形式的内存情况;</p><p>用<code>free -m</code>可以看到mb形式, <code>free -g</code>是gb形式</p><h2 id="查看CPU信息"><a href="#查看CPU信息" class="headerlink" title="查看CPU信息"></a>查看CPU信息</h2><p><code>cat /proc/cpuinfo</code></p><h2 id="查看端口情况"><a href="#查看端口情况" class="headerlink" title="查看端口情况"></a>查看端口情况</h2><p><code>netstat -anp | grep -w 10208</code>: 查看port=10208的端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tcp        0      0 0.0.0.0:10208           0.0.0.0:*               LISTEN      6602/docker-proxy   </span><br><span class="line">tcp        0      0 10.28.5.208:34098       10.28.5.208:10208       ESTABLISHED 6874/ssh            </span><br><span class="line">tcp        0      0 10.28.5.208:46100       10.28.5.208:10208       TIME_WAIT   -                   </span><br><span class="line">tcp6       0      0 :::10208                :::*                    LISTEN      6609/docker-proxy</span><br></pre></td></tr></table></figure><p>可以发现pid=6602, 6609等进程和port=10208有关</p><h2 id="根据pid查看对应进程"><a href="#根据pid查看对应进程" class="headerlink" title="根据pid查看对应进程"></a>根据pid查看对应进程</h2><p><code>ps -aux | grep 6602</code>: 查看pid=6602对应具体的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">root      6602  0.0  0.0 1160936 3888 ?        Sl   10:46   0:00 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 10208 -container-ip 172.17.0.3 -container-port 22</span><br><span class="line">root      7252  0.0  0.0  13140  1120 pts/286  S+   10:49   0:00 grep --color=auto 6602</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现就是自己执行的docker指令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;查看内存情况&quot;&gt;&lt;a href=&quot;#查看内存情况&quot; class=&quot;headerlink&quot; title=&quot;查看内存情况&quot;&gt;&lt;/a&gt;查看内存情况&lt;/h2&gt;&lt;p&gt;用&lt;code&gt;top&lt;/code&gt;指令能看到kb形式的内存情况;&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;free -m</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Cheatsheet" scheme="http://example.com/tags/Cheatsheet/"/>
    
  </entry>
  
  <entry>
    <title>Spark &amp; Hadoop</title>
    <link href="http://example.com/2023/04/09/%E7%AC%94%E8%AE%B0%20-%20Spark%20&amp;%20Hadoop/"/>
    <id>http://example.com/2023/04/09/%E7%AC%94%E8%AE%B0%20-%20Spark%20&amp;%20Hadoop/</id>
    <published>2023-04-08T16:00:00.000Z</published>
    <updated>2023-04-09T15:03:45.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spark3和hadoop3是啥关系-没有hadoop3能跑spark3吗"><a href="#spark3和hadoop3是啥关系-没有hadoop3能跑spark3吗" class="headerlink" title="spark3和hadoop3是啥关系,没有hadoop3能跑spark3吗?"></a>spark3和hadoop3是啥关系,没有hadoop3能跑spark3吗?</h2><p>chatGPT:</p><blockquote><p>Spark3和Hadoop3都是大数据领域的重要开源软件，但它们并不是互相依赖的。Spark是一个独立的计算框架，它可以在不同的分布式存储系统上运行，包括Hadoop分布式文件系统（HDFS）。因此，在没有Hadoop3的情况下，Spark3仍然可以在其他分布式存储系统上运行，如Amazon S3、Azure Blob Storage等。不过，如果要在HDFS上运行Spark3，需要使用Hadoop2.7或更高版本。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spark3和hadoop3是啥关系-没有hadoop3能跑spark3吗&quot;&gt;&lt;a href=&quot;#spark3和hadoop3是啥关系-没有hadoop3能跑spark3吗&quot; class=&quot;headerlink&quot; title=&quot;spark3和hadoop3是啥关系</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Spark" scheme="http://example.com/tags/Spark/"/>
    
    <category term="Hadoop" scheme="http://example.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://example.com/2023/04/06/%E7%AC%94%E8%AE%B0%20-%20Docker/"/>
    <id>http://example.com/2023/04/06/%E7%AC%94%E8%AE%B0%20-%20Docker/</id>
    <published>2023-04-05T16:00:00.000Z</published>
    <updated>2023-04-09T04:27:27.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报错-Cannot-connect-to-the-Docker-daemon-at-unix-var-run-docker-sock-Is-the-docker-daemon-running"><a href="#报错-Cannot-connect-to-the-Docker-daemon-at-unix-var-run-docker-sock-Is-the-docker-daemon-running" class="headerlink" title="报错: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?"></a>报错: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</h2><p>(1) 关闭docker<br>(2) 启动docker daemon<br>(3) 验证docker是否激活</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service docker stop</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><h2 id="坑点-Docker-执行entrypoint-sh后自行exit"><a href="#坑点-Docker-执行entrypoint-sh后自行exit" class="headerlink" title="坑点: Docker 执行entrypoint.sh后自行exit"></a>坑点: Docker 执行entrypoint.sh后自行exit</h2><p>Docker不是虚拟机, 容器中的应用都应该以前台执行, 而不是像虚拟机、物理机里面那样, 用 systemd 去启动后台服务, 容器内没有后台服务的概念. </p><p>我在dockerfile里</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> entrypoint.sh /sbin</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> 777 /sbin/entrypoint.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/sbin/entrypoint.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>其中entrypoint.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">service ssh start</span><br></pre></td></tr></table></figure><p>然后发现容器执行后就立即退出了. 这就是因为没有搞明白前台, 后台的概念, 没有区分容器和虚拟机的差异, 依旧在以传统虚拟机的角度去理解容器. </p><p>对于容器而言, 其启动程序就是容器应用进程, 容器就是为了主进程而存在的, 主进程退出, 容器就失去了存在的意义, 从而退出, 其它辅助进程不是它需要关心的东西. </p><p>通过上面的介绍, 我们应该知道上面那个问题的原因了, 一句话：在Docker daemon模式下, 无论是使用ENTRYPOINT, 还是CMD, 最后的命令, 一定要<strong>使当前进程也就是容器的主进程一直运行下去</strong>, 这样才能够防容器退出, 否则主进程退出了, 容器就没有意义了, 就会跟着退出. </p><p>下面一些也是无效的启动方式</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/usr/local/tomcat.sh&quot;</span>,<span class="string">&quot;start&quot;</span>] </span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/usr/local/tomcat.sh&quot;</span>] </span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>下面这样写才有效, 但是前提是容器的环境中要有sshd这个终端服务器命令. </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##SSH终端服务器作为后台运行 </span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> /usr/local/tomcat.sh start &amp;&amp; /usr/sbin/sshd -D</span></span><br></pre></td></tr></table></figure><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>将当前用户添加到docker用户组<br>为了避免每次使用docker命令都需要加上sudo权限, 可以将当前用户加入安装中自动创建的docker用户组(可以参考官方文档)：</p><p><code>sudo usermod -aG docker $USER</code><br>执行完此操作后, 需要退出服务器, 再重新登录回来, 才可以省去sudo权限. </p><p>镜像（images）</p><p><code>docker pull ubuntu:20.04</code>: 拉取一个镜像</p><p><code>docker images</code>: 列出本地所有镜像</p><p><code>docker image rm ubuntu:20.04 或 docker rmi ubuntu:20.04</code>: 删除镜像ubuntu:20.04</p><p><code>docker [container] commit CONTAINER IMAGE_NAME:TAG</code>: 创建某个container的镜像</p><p><code>docker save -o ubuntu_20_04.tar ubuntu:20.04</code>: 将镜像ubuntu:20.04导出到本地文件ubuntu_20_04.tar中</p><p><code>docker load -i ubuntu_20_04.tar</code>: 将镜像ubuntu:20.04从本地文件ubuntu_20_04.tar中加载出来<br>容器(container)</p><p><code>docker [container] create -it ubuntu:20.04</code>: 利用镜像ubuntu:20.04创建一个容器. </p><p><code>docker ps -a</code>: 查看本地的所有容器</p><p><code>docker [container] start CONTAINER</code>: 启动容器</p><p><code>docker [container] stop CONTAINER</code>: 停止容器</p><p><code>docker [container] restart CONTAINER</code>: 重启容器</p><p><code>docker [contaienr] run -itd ubuntu:20.04</code>: 创建并启动一个容器</p><p><code>docker [container] attach CONTAINER</code>: 进入容器<br>先按Ctrl-p, 再按Ctrl-q可以挂起容器</p><p><code>docker [container] exec CONTAINER COMMAND</code>: 在容器中执行命令</p><p><code>docker [container] rm CONTAINER</code>: 删除容器</p><p><code>docker container prune</code>: 删除所有已停止的容器</p><p><code>docker export -o xxx.tar CONTAINER</code>: 将容器CONTAINER导出到本地文件xxx.tar中</p><p><code>docker import xxx.tar image_name:tag</code>: 将本地文件xxx.tar导入成镜像, 并将镜像命名为image_name:tag</p><p><code>docker export/import</code>与<code>docker save/load</code>的区别: </p><p>export/import会丢弃历史记录和元数据信息, 仅保存容器当时的快照状态<br>save/load会保存完整记录, 体积更大</p><p><code>docker top CONTAINER</code>: 查看某个容器内的所有进程</p><p><code>docker stats</code>: 查看所有容器的统计信息, 包括CPU、内存、存储、网络等信息</p><p><code>docker cp xxx CONTAINER:xxx 或 docker cp CONTAINER:xxx xxx</code>: 在本地和容器间复制文件</p><p><code>docker rename CONTAINER1 CONTAINER2</code>: 重命名容器</p><p><code>docker update CONTAINER --memory 500MB</code>: 修改容器限制</p><p>实战</p><p>进入AC Terminal, 然后：</p><p>scp /var/lib/acwing/docker/images/docker_lesson_1_0.tar server_name:  # 将镜像上传到自己租的云端服务器<br>ssh server_name  # 登录自己的云端服务器</p><p>docker load -i docker_lesson_1_0.tar  # 将镜像加载到本地<br>docker run -p 20000:22 –name my_docker_server -itd docker_lesson:1.0  # 创建并运行docker_lesson:1.0镜像</p><p>docker attach my_docker_server  # 进入创建的docker容器<br>passwd  # 设置root密码</p><p>去云平台控制台中修改安全组配置, 放行端口20000. </p><p>返回AC Terminal, 即可通过ssh登录自己的docker容器：</p><p>ssh <a href="mailto:&#114;&#x6f;&#111;&#116;&#x40;&#x78;&#x78;&#120;&#46;&#120;&#120;&#120;&#x2e;&#x78;&#120;&#x78;&#x2e;&#120;&#120;&#120;">&#114;&#x6f;&#111;&#116;&#x40;&#x78;&#x78;&#120;&#46;&#120;&#120;&#120;&#x2e;&#x78;&#120;&#x78;&#x2e;&#120;&#120;&#120;</a> -p 20000  # 将xxx.xxx.xxx.xxx替换成自己租的服务器的IP地址<br>然后, 可以仿照上节课内容, 创建工作账户acs. </p><p>最后, 可以参考4. ssh——ssh登录配置docker容器的别名和免密登录. </p><p>小Tips</p><p>如果apt-get下载软件速度较慢, 可以参考清华大学开源软件镜像站中的内容, 修改软件源. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;报错-Cannot-connect-to-the-Docker-daemon-at-unix-var-run-docker-sock-Is-the-docker-daemon-running&quot;&gt;&lt;a href=&quot;#报错-Cannot-connect-to-the-</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>周记 - 2023 04.03-04.09</title>
    <link href="http://example.com/2023/04/03/%E5%91%A8%E8%AE%B0%20-%202023%2004.03-04.09/"/>
    <id>http://example.com/2023/04/03/%E5%91%A8%E8%AE%B0%20-%202023%2004.03-04.09/</id>
    <published>2023-04-02T16:00:00.000Z</published>
    <updated>2023-04-08T15:20:57.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="04-03-周一-阴-gt-暴雨"><a href="#04-03-周一-阴-gt-暴雨" class="headerlink" title="04.03 周一 阴-&gt;暴雨"></a>04.03 周一 阴-&gt;暴雨</h2><p>下午心血来潮, 又打开了cf, 随便找了道R1300的题做. 想了挺久, 可能写完加起来得有1h了. 然后又找了道R1500的构造题, 没想到直接红温了hhh, 干到下午5点多要吃饭了还是WA2, 直接拍屁股走人了. </p><p>晚上想试下用python的库来画出webgraph官网上的那种degree-frequency图(xy轴分别都取了log10对数). 然后就想起了数模摸鱼期间用的jupyter ipynotebook, 于是就在郑老师的服务器上创了个.ipynb文件, 发现连接不上内核… 寄! 明天再说8. </p><h2 id="04-04-周二-雨"><a href="#04-04-周二-雨" class="headerlink" title="04.04 周二 雨"></a>04.04 周二 雨</h2><p>早上8点半不到就起床了, 因为跟老师约好了讨论. </p><p>下午睡醒就着手于寻找最相关的因素, 首先先排除了”高度数点平均度数 与 平均度数之间的倍数”. </p><h2 id="04-05-周三-雨"><a href="#04-05-周三-雨" class="headerlink" title="04.05 周三 雨"></a>04.05 周三 雨</h2><h2 id="04-06-周四-雨"><a href="#04-06-周四-雨" class="headerlink" title="04.06 周四 雨"></a>04.06 周四 雨</h2><h2 id="04-07-周五-晴"><a href="#04-07-周五-晴" class="headerlink" title="04.07 周五 晴"></a>04.07 周五 晴</h2><p>难得出太阳, 宿舍连廊也有挺多人开始晒被子了. 气温也挺合适, 感觉今天很适合出行呢. 上午</p><p>下午睡醒, 就和Jimmy一起去橘子洲on foot. 仍记得上学期期末那会, 我和zzm直接从五一广场步行回来, 沿途欣赏了湘江的夜景, 走过了1000多米的橘子洲大桥, 再一路走回天马. 所以这次也想着步行, 可是走到橘子洲, 才发现已经没啥力气再走到主席像那了. </p><h2 id="04-08-周六-晴"><a href="#04-08-周六-晴" class="headerlink" title="04.08 周六 晴"></a>04.08 周六 晴</h2><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回忆于：03.29日22点30分 &amp;&amp; 03.30日晚22点30分<br>BGM: &lt;四月是你的谎言&gt; OP &amp;&amp; ED &amp;&amp; OST</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;04-03-周一-阴-gt-暴雨&quot;&gt;&lt;a href=&quot;#04-03-周一-阴-gt-暴雨&quot; class=&quot;headerlink&quot; title=&quot;04.03 周一 阴-&amp;gt;暴雨&quot;&gt;&lt;/a&gt;04.03 周一 阴-&amp;gt;暴雨&lt;/h2&gt;&lt;p&gt;下午心血来潮, 又打开了</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>周记 - 2023 03.27-04.02</title>
    <link href="http://example.com/2023/03/29/%E5%91%A8%E8%AE%B0%20-%202023%2003.27-04.02/"/>
    <id>http://example.com/2023/03/29/%E5%91%A8%E8%AE%B0%20-%202023%2003.27-04.02/</id>
    <published>2023-03-28T16:00:00.000Z</published>
    <updated>2023-04-05T02:16:00.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="03-27-周一-小雨"><a href="#03-27-周一-小雨" class="headerlink" title="03.27 周一 小雨"></a>03.27 周一 小雨</h2><p>早上10点和郑老师讨论了下进度, 主要就是我目前的实验都是在爪机的WSL2上跑的小数据集, 最大也只能到orkut这种; 另外就是我简要汇报了下上周调研的路径规划的俩算法CCH和CRP, 然后4.9之前要写完个计划书之类的. </p><p>开完会我在昨天向蔡YZ学长要的服务器上, 装了boost, gflags和glog. </p><p>然后下午我又开摆了, 下午搜了下研究性实习的相关岗位. </p><p>晚上也摆, 看OIerDB看得津津有味. 睡前又稍稍看了看近期的CP比赛, 但是又不想思考, 做不动题, 颓废的一…</p><h2 id="03-28-周二-小雨"><a href="#03-28-周二-小雨" class="headerlink" title="03.28 周二 小雨"></a>03.28 周二 小雨</h2><p>主要任务还是毕设, 其实就是把之前写挫了的算法改改. </p><blockquote><p>把选块顺序从p-1, p-2…0, 改成了0, 1, 2…p-1. 这样有个好处就是最后double_expand的时候可以直接从FLAGS_p往后添加块了. </p></blockquote><p>然后写着写着突然想看看学学Effective C++和Effective STL了. 于是去网上瞎逛, 又浪费了一个上午… </p><h2 id="03-29-周三-阴"><a href="#03-29-周三-阴" class="headerlink" title="03.29 周三 阴"></a>03.29 周三 阴</h2><p>今天一整天基本都在搞毕设. 忙活一整天下来, 总结一下就是搞了以下几个东西: </p><ol><li>追踪了每条边的分配, one of 正确性验证</li><li>加入了边平衡性的检查, one of 正确性验证</li><li>加入了合并时分区间是否有交集的检查, one of 正确性验证</li></ol><p>然而等全部写完, 并且收集完实验数据之后, 才发现边平衡性原来出了问题… 想了想, 哦, 原来合并的时候只能俩俩合并, 不能说有些桶里只有一个块, 有些桶三个块, 感觉上是真的寄了啊. 于是赶紧把代码注释掉一行, 重新跑了全部实验. 好在效果差的不太多, 该差的还是很差hhh. </p><p>今天吃饭的时候都看了<Charlotte>, 看到有宇的妹妹因为被小混混威胁 + 自身崩坏的能力挂了, 有宇就直接黑化一蹶不振. 最后被奈绪救回来. 奈绪带男主去听演唱会, 男主突然找到缺失的一部分记忆. 从此决定去找找哥哥隼</p><p>晚上实在是想摆了, 但是啥都不想看, 啥都不想玩. 只能打开<Limbo>来刷刷全成就, 对着B站的攻略刷了半个小时, 刷完隐藏关卡之后才发现成就进度11/13. 点进去未完成成就, 竟然有个成就是5条命内通关全部, 完成的人只有0.1%. 果断把游戏给卸了hh.</p><p>到10点多, 我又开始对着实验结果发愁, 光按照这个指标来说, 我感觉在实际任务上超过NE和HEP的几率不是很大… 仔细想了想我又觉得点平衡性参数里更加重要的是max / avg, 毕竟每一个iteration的时长应该都取决最慢的那个分区. 所以变异系数感觉对于任务效果的表现力应该不如max / avg那么大. 好烦好烦啊啊啊. 于是向郑老师求助了一波, 老师也答应明早10点讨论下. </p><h2 id="03-30-周四-晴"><a href="#03-30-周四-晴" class="headerlink" title="03.30 周四 晴"></a>03.30 周四 晴</h2><p>早上九点下床, 十点开始跟老师讨论实验进度和接下来的对策. 目前主要遇到的问题就是: 点平衡性的max / avg下不来… 对策的话总结下来就是以下几点: </p><ol><li>尝试把一些点在分区之间转移. 即把点数大的块分一些点到小的块上. 但是会损失边平衡性</li><li>把k调大, 因为目前最后split阶段, k默认=2. 我的直觉告诉我这会造成复制因子的暴增</li><li>大体框架沿(chao)用(xi)HEP. 即对高度数点和低度数点用HDRF和NE进行划分. NE部分换成现在的尝试5</li></ol><p>中午吃饭看了<Charlotte>第10话, 男主找到了他拥有穿越时空能力的哥哥隼, 然后有宇掠夺了隼的能力, 穿越回妹妹步未回学校前一天, 把妹妹的崩坏能力掠夺了, 然后又在小混混手下救下了妹妹. </p><p>中午睡醒起来又得去院楼毕设打卡, 不过还好天气还不错, 下午走在路上也感觉没那么冷了. 回来的时候去荫马塘做了10*双杠臂屈伸 + 10个引体向上. 想再来做第二组, 发现已经没剩下啥力气了… 第二组只能做4个双杠臂屈伸, 是真的难顶hh. </p><p>回来看了看空空如也的邮箱, 心里是真的难受, 我就想去实习下, 都是申请的那种研究岗位, 可是没有一封回复信hhh. 发呆了一会就干饭了. </p><p>晚饭直接把<Charlotte>第11~13话都看完了. 主要就是说隼翼组织的司机受到反派威胁, 把友利和熊耳(就那个浑身湿透能追踪能力者的人)抓起来了, 然后有宇只身前往, 结果熊耳寄了. 有宇在友利的建议下选择跑遍全世界, 把所有能力者的能力都吸收掉, 以此来保护他们. 到后面周游世界, 吸收了一堆能力之后是真的挺尬的hhh, 就挺像火影疾风传第二次忍界大战那会一样, 有一种战力崩坏的美. 总的来说还算是Good Ending 8. 评分的话我给9.7. 打算明天再把<Charlotte>的SP看完, 后天就到4月了, 可以看&lt;四谎&gt;了</p><p>晚上我照着对策2改了改代码, 其实挺容易改. 跑了下结果. 芜湖! 感觉还行诶. 大概就是以下这样: </p><table><thead><tr><th>点平衡 / 复制因子</th><th>尝试5 -k 2</th><th>尝试5 -k 3</th><th>尝试5 -k 4</th><th>HEP-1</th><th>HEP-10</th><th>HEP-100</th><th>NE</th></tr></thead><tbody><tr><td>Flickr(-round 0, 1.25)</td><td>2.9481 / 0.502106 / 1.67129</td><td>2.01713 / 0.310466 / 1.75087</td><td>1.64356 / 0.238927 / 1.78978</td><td>1.34667 / 0.18103 / 1.99497</td><td>2.84698 /  0.58959 /  1.86156</td><td>4.36106 / 0.78329 / 1.71191</td><td>5.75499 / 0.983405 / 1.58445</td></tr><tr><td>pokec</td><td>1.19651 / 0.107321 / 2.5574</td><td></td><td></td><td>1.18711 / 0.104949 / 4.09252</td><td>1.45267 / 0.193644 / 2.37787</td><td>1.44878 / 0.200215 / 2.32288</td><td>1.51142 / 0.204164 / 2.32316</td></tr><tr><td>friendster_mini</td><td>2.10636 / 0.404421 / 1.38031</td><td>1.51315 / 0.215674 / 1.42383</td><td>1.29898 / 0.127499 / 1.46265</td><td>1.48519 / 0.153918 / 1.88687</td><td>2.37839 / 0.391628 / 1.50684</td><td>3.99433 / 0.786431 / 1.30828</td><td>4.00521 / 0.786431 / 1.30592</td></tr><tr><td>LiveJournal</td><td>1.1505 / 0.0730565 / 1.66522</td><td></td><td></td><td></td><td>1.28244 / 0.28525 / 1.72622</td><td>1.31918 / 0.29089   / 1.56135</td><td>1.32731 / 0.299748 / 1.57191</td></tr><tr><td>orkut(-round 3, 1.25)</td><td>1.15136 / 0.07300 / 2.68283</td><td></td><td></td><td></td><td>1.22523 / 0.16664 / 2.87311</td><td>1.31264 / 0.1844 / 2.50675</td><td>1.30823 / 0.17113 / 2.51108</td></tr><tr><td>orkut big(跟HEP论文不是同一个数据集)</td><td></td><td>2.44573 / 0.328861 / 2.87441</td><td></td><td>1.37673 / 0.128226 / 3.49912</td><td>2.30367 / 0.411939 / 2.93919</td><td>5.44129 / 0.955494 / 2.22548</td><td>5.41935 / 0.948575 / 2.23474</td></tr><tr><td>Wikipedia</td><td>1.14254 / 0.082909 / 1.61386</td><td></td><td></td><td>1.16362 / 0.145142 / 2.20316</td><td>1.48398 / 0.29177 / 1.58819</td><td>1.43262 / 0.26002 / 1.5015</td><td>1.39854 / 0.254808 / 1.4999</td></tr><tr><td>twitter</td><td>3.08953 / 0.415019 / 1.61932</td><td>2.41878 / 0.288194 / 1.64963</td><td>1.98601 / 0.220865 / 1.68786</td><td>1.27907 / 0.162753 / 1.95498</td><td>2.6003 / 0.374952 / 1.68446</td><td>2.24783 / 0.361768 / 1.53564</td><td>5.37025 / 0.826788 / 1.48832</td></tr><tr><td>it-2004(-round 5, 1.25)</td><td>1.85107 / 0.22373 / 1.0787</td><td>1.33886 / 0.136391 / 1.06624</td><td>1.17596 / 0.0752637 / 1.11086 (edge balance: 1.02442)</td><td>1.27731 / 0.19878 / 1.2172</td><td>1.71589 / 0.38784 / 1.09575</td><td>2.37903 / 0.428073 / 1.06285</td><td>3.245 / 0.568176 / 1.04482</td></tr><tr><td>sinaweibo(-round 5, 1.25)</td><td>1.59702 / 0.3188 / 1.06843</td><td>1.17168 / 0.101349 / 1.07115</td><td></td><td>1.71819 / 0.263641 / 1.14221</td><td>2.8689 / 0.651315 / 1.10154</td><td>3.06843 / 0.699459 / 1.0565</td><td>2.96213 / 0.721086 / 1.04583</td></tr></tbody></table><p>向郑老师汇报了之后, 我明确表达了自己对于正确性的怀疑, 打算明天搞个大检查看看hh. </p><h2 id="03-31-周五-晴"><a href="#03-31-周五-晴" class="headerlink" title="03.31 周五 晴"></a>03.31 周五 晴</h2><p>中午吃饭看<Charlotte> SP的P14. </p><p>下午在研究到底选哪个图计算框架来跑任务, 我看到的有好多的说: giraph(不知道是不是这么拼的), Gemini(thu大佬写的), powergraph(MPI), graphx(spark). 4篇论文里两篇是powergraph, 两篇是graphx. yysy我挺反感spark, hadoop生态的, 其实是因为我之前学过没学懂, 而且他们都是Java写的, 我对Java实在是没啥好感hhh. 说到Java, 我就想起&lt;编程新技术实务&gt;这门课, 我基本全称都是copy的github上的项目, Java可以说是只会一个”sout”. </p><p>先是想试试graphx, 然后spark不会, start-all启动失败, 寄. </p><p>然后晚上我查了查powergraph, 用mpi的可能好弄些. 但是hostname 好像一样是要多个ip, 寄</p><p>好像可以用docker来实现类似伪分布式之类的, 但是不会, 寄. </p><h2 id="04-01-周六-晴"><a href="#04-01-周六-晴" class="headerlink" title="04.01 周六 晴"></a>04.01 周六 晴</h2><p>四月终于来了, 今天气温感觉又回升了些了. 早上还是在查能不能用一台机器, 用docker来搞类似伪分布式的环境. 但是我docker完全不会. 哎, 这些基本功都没咋学过, 感觉是时候集中精力冲一波大电了. </p><p>早上想去搞一个真正的twitter-2010数据集, 之前下载的貌似不是完整版. 然后我去webgraph他们网站, 发现得安装他们的webgraph包. 无语了, java的东西, 整个上午都在搞这个包. </p><p>下午睡醒, 下床对着电脑网页发呆, 突然又想找找IT2004”偏斜度”的指标, 或者说目前算法能优化点平衡性的前提. 想起来webgraph网站上对于数据集有一些图表描述, 于是就打开了IT-2004和livejournal的对比了下. 发现</p><h2 id="04-02-周日-晴"><a href="#04-02-周日-晴" class="headerlink" title="04.02 周日 晴"></a>04.02 周日 晴</h2><p>早上一起来, 就发现昨晚睡前跑的uk-2007-05崩溃了… 重新跑了下, 发现光是载入全图, 内存就用了80+G. 好像得优化下算法了, 由于目前NE会对原edges进行修改, 所以我目前多加了个edges_backup, 导致内存占用差不多翻了一倍. </p><p>验证了下(vector) a = b 会不会把b.capacity也赋给a, 还是说只会把b.size给a, 验证代码如下: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">10000</span>)</span>, <span class="title">b</span><span class="params">(<span class="number">10000</span>)</span></span>;</span><br><span class="line">    cerr &lt;&lt; a.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cerr &lt;&lt; b.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; b.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> (a.<span class="built_in">size</span>() &gt; <span class="number">1000</span>) a.<span class="built_in">pop_back</span>();</span><br><span class="line">    a.<span class="built_in">shrink_to_fit</span>();</span><br><span class="line">    cerr &lt;&lt; a.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    b = a;</span><br><span class="line">    cerr &lt;&lt; b.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; b.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    b.<span class="built_in">shrink_to_fit</span>();</span><br><span class="line">    cerr &lt;&lt; b.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; b.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10000 10000</span></span><br><span class="line"><span class="comment">// 10000 10000</span></span><br><span class="line"><span class="comment">// 1000 1000</span></span><br><span class="line"><span class="comment">// 1000 10000</span></span><br><span class="line"><span class="comment">// 1000 1000</span></span><br></pre></td></tr></table></figure><p>结果还真是只把size给了a, 看来还得加上个shrink_to_fit()才行啊hh. </p><p>下午晚上都在思考如何才能减少内存使用量. 下午想到的首先是把edges和edges_backup两个占内存大头的vector<edge_t>删掉其中一个, 然后再通过在struct edge_t里补充一个bool来做边的标记, 这样就可以通过一个struct来完成任务. </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge_t</span> &#123;</span><br><span class="line">    <span class="type">bool</span> valid;</span><br><span class="line">    <span class="type">uint32_t</span> first, second;</span><br><span class="line">&#125; __attributed__((pakced)) ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>考虑到内存对齐的reserved bit会导致内存占用变大, 所以加上了__attributed__((pakced)), 然而这样可能又会对性能有很大影响… 再三思考下, 决定舍弃原本(1 &lt;&lt; 32) - 1的数据范围, 留出1 &lt;&lt; 31的数据范围用作valid标识. 效果如下: </p><p>Memory Overhead(it-2004)<br>|         | 原版本  | 4.2优化 |<br>| ——- | ——- | ——- |<br>| it-2004 | 43.982g | 23.713g |</p><p>终于可以愉快地跑uk-2007-05了, 毕竟webgraph上的统计特征显示这张图也是有大批度数相近的高度数节点的, 挺期待效果的hhh. </p><p>晚上和rcpd病友王xh打了电话, 我从电话中得知她之前打过一针, 并且似乎没打准, 打到声带了. 上个月她又去了次, 打完后起初有效, 可是前几天又不会打了. 我们讨论到了窦教授和Bastian打针手段的不同点, 由于窦教授是通过超声定位, 从脖子注射的; 而Bastian是直接通过喉镜注射, 确实从精度上来看可能会没那么好. 她跟我谈到了去米国找Bastian打针, 我表示我将来的最终治疗是将环咽肌切开. 她似乎也正在经历我中学到大二那8年的痛苦, 于是我说至少现在已经清楚了病因和治疗方案, rcpd也会逐渐被普及, 接下来交给时间就好了. </p><p>令我倍感欣慰的是, 我得知我的经历和帖子给她和其他十几位病友带来了福音. 我也再次为自己的这段经历感到自豪, 毕竟此生最大的成就, 或者说给世界最大的贡献就是作为国内第一人接收了治疗, 并且传播了这个治疗方法. </p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回忆于：03.29日22点30分 &amp;&amp; 03.30日晚22点30分<br>BGM: &lt;四月是你的谎言&gt; OP &amp;&amp; ED &amp;&amp; OST</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;03-27-周一-小雨&quot;&gt;&lt;a href=&quot;#03-27-周一-小雨&quot; class=&quot;headerlink&quot; title=&quot;03.27 周一 小雨&quot;&gt;&lt;/a&gt;03.27 周一 小雨&lt;/h2&gt;&lt;p&gt;早上10点和郑老师讨论了下进度, 主要就是我目前的实验都是在爪机的W</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>周记 - 2023 03.20-03.26</title>
    <link href="http://example.com/2023/03/22/%E5%91%A8%E8%AE%B0%20-%202023%2003.20-03.26/"/>
    <id>http://example.com/2023/03/22/%E5%91%A8%E8%AE%B0%20-%202023%2003.20-03.26/</id>
    <published>2023-03-21T16:00:00.000Z</published>
    <updated>2023-04-03T02:33:42.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="03-20-周一-小雨"><a href="#03-20-周一-小雨" class="headerlink" title="03.20 周一 小雨"></a>03.20 周一 小雨</h2><p>早上八点左右起床, 先是去校医院做个体检. 首先做内科, 测的心率92, 刚开始以为爬楼梯爬累了, 所以没当回事. 没想到测的舒张压也快到正常范围的上限了, 心肺功能变差了好多, 可能宅家宅久了8. 测身高体重依旧是常规操作, 穿羽绒大袍, 然后往口袋里塞点东西, 这次没带哑铃所以塞了个个水壶. 结果一看身高181.5cm, 体重58.5. BMI 17.+ 还是要完蛋. 回宿舍的路上自习想了想应该是头发长度的问题8, 毕竟他的机器是激光测的. 不过准确身高应该也有180了, 大四体测测的是179.6, 有点难顶, 真的好想报身高直接报180hhh. </p><p>下午晚上都在准备明天的毕设中期答辩, 中午午睡的时候手机忘记调勿扰了, 结果微信哐哐的震, 午睡就这么没了… 原来是毕设群的那些卷王在问参考文献翻译相关的要求, 我甚至还没开始准备, 只能被迫下床. 其实直到下午之前我都还没想好最终应该用怎么样的方案去应付明天的答辩. 因为目前的尝试效果都不咋地. 冥思苦想之后突然想到把BPart和NE瞎搞缝合. 然后写了个最简陋的试了下, 发现单从点平衡度量来看好像还行, 虽然我知道这种缝合怪肯定发不了文章的, 但是应付下毕设应该还是没啥问题的. 于是晚上我就疯狂搞PPT, 到12点zwling要我帮他去掉译文的水印. 看到他的文章翻译的好得一, 于是我试了下他用的arxiv翻译, 发现几篇文章都没法翻译, 寄. </p><h2 id="03-21-周二-小雨"><a href="#03-21-周二-小雨" class="headerlink" title="03.21 周二 小雨"></a>03.21 周二 小雨</h2><p>P.S. 今天穿上了ICPC南京站的黑色棒球服, 简直不要太好看, 感觉在路上走自信力直接+50%. </p><p>早上8点半左右出门去院楼签到, 回来想去综合楼找个啥地方蹭下网, 下一些番, 主要想下&lt;追逐繁星的孩子&gt;, 因为据说好像跟&lt;玲芽之旅&gt;有点关系. 我找了间智慧教室, 看刚好生一个坑位有电源, 没想到是没电的, 电脑开机不到一分钟就自动关机了. 只能回宿舍继续肝下午答辩的PPT. </p><p>中午小睡了下, 但又没睡着. 下午1点半出门, 中楼121. 答辩可以说是水的一了, 就跟平时的实验验收一样, 只不过助教换成了老师而已, 老师看来也是接触过图划分的, NE的强悍她都猛地点头. 我说我想搞个双平衡的试试, 最后放了昨晚临时写的代码的结果, 老师说还不错, 问我是自己搞的吗. 我说老师指导的. 感觉还挺好应付过去的hhh. </p><p>“答辩”完之后我就去帮zzm盖章. 首先是跑到红楼教务处, 老师让我去找二办的信息化部. 然后我就被当成球一样踢到了信息化部, 谁知那个老师态度那么差, 又把我踢回红楼. 我只能跑去复临舍试试打印机行不行. 试了下发现还真可以, 于是就帮zm盖好章了. </p><h2 id="03-22-周三-小雨"><a href="#03-22-周三-小雨" class="headerlink" title="03.22 周三 小雨"></a>03.22 周三 小雨</h2><p>晚上老师来问我最新的实验效果, 我刚好可以把昨天下午新想出来算法的实验结果拿出来show off一下. 实验结果大概长这样: </p><blockquote><p>边平衡性全为1</p></blockquote><table><thead><tr><th>点平衡 / 复制因子</th><th>尝试5</th><th>HEP-1</th><th>HEP-10</th><th>HEP-100</th><th>NE</th></tr></thead><tbody><tr><td>Flickr</td><td>2.14585 / 2.92259</td><td>1.19371 / 3.64274</td><td>2.72022 / 2.68514</td><td>3.90338 / 2.09799</td><td>4.22383 / 1.98494</td></tr><tr><td>LiveJournal</td><td>1.07545 / 1.88658</td><td>1.55617 / 2.47976</td><td>1.28244 / 1.72622</td><td>1.31918 / 1.56135</td><td>1.36161 / 1.56927</td></tr><tr><td>pokec</td><td>1.1298 /  3.10058</td><td>1.18711 / 4.09252</td><td>1.45267 / 2.37787</td><td>1.44878 / 2.32288</td><td>1.49803 / 2.32138</td></tr><tr><td>orkut</td><td>1.06922 / 2.97</td><td>1.19931 / 5.40549</td><td>1.22523 / 2.87311</td><td>1.31264 / 2.50675</td><td>1.28039 / 2.52495</td></tr></tbody></table><p>我还想在更大一点的数据集上试试效果, 于是相中了web-it-2004这个数据集. 主要是因为在HEP这篇文章里, IT-2004的偏斜度是最大的, 感觉上也是最有可能发挥效果的数据集. 结果捣鼓半天发现还得下载配置另外的java包才能获得完整数据集, 实在打扰. </p><p>晚上我还趁着春促买了些游戏, 这次学聪明了, 直接上steampy. 整了个&lt;千恋 * 万花&gt; 42.97R, &lt;高考恋爱一百天&gt; 20R. 又在Jimmy推荐下买了&lt;饥荒联机版&gt; 12R. </p><h2 id="03-23-周四-大雨-gt-小雨"><a href="#03-23-周四-大雨-gt-小雨" class="headerlink" title="03.23 周四 大雨-&gt;小雨"></a>03.23 周四 大雨-&gt;小雨</h2><p>今天下午睡醒去帮zzm盖章, 软件所在保研手续这方面确实是有些bureaucratic. Jimmy刚好要去复临舍打印复试的成绩单, 所以顺路就一起坐车去了. 为了信息院毕设的坑比签到打卡, 只得在荫马塘下车, 看到教室只有不到10人, 是真的难蚌. 打卡完就是到复临舍打印成绩单, 没想到打印机刚好没墨了, Jimmy也治好作罢. 最后是我俩一起去电气院院楼找辅导员签字. 一开始我找错了人, 那位老师似乎也觉得实在没必要搞这种bureaucratic的东西, 态度也不是很好. 上到3楼又跑回2楼, 才找到19级新辅导员的办公室. </p><p>电气院又换辅导员了, 现在的辅导员是小热, 似乎她对这种表并不是很愿意签字, 只得叫zzm自己打电话给她, 甚至还让zzm授权我替他签名. 几番折腾下, 终于把表签完字盖完章了, 这时外面突然就开始下暴雨了… 和Jimmy在一楼门口等了几分钟, 还是决定趟着雨去下坡路的公交站坐车回天马. 没想到下车的时候雨就小了很多, 运气属实不太好呢hhh. </p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回忆于：02.22日晚19点30分 &amp;&amp; 02.26日22点30分</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;03-20-周一-小雨&quot;&gt;&lt;a href=&quot;#03-20-周一-小雨&quot; class=&quot;headerlink&quot; title=&quot;03.20 周一 小雨&quot;&gt;&lt;/a&gt;03.20 周一 小雨&lt;/h2&gt;&lt;p&gt;早上八点左右起床, 先是去校医院做个体检. 首先做内科, 测的心率9</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux - Boost &amp; glog &amp; gflags的安装</title>
    <link href="http://example.com/2023/03/06/Linux%20-%20Boost%20&amp;%20glog%20&amp;%20gflags%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2023/03/06/Linux%20-%20Boost%20&amp;%20glog%20&amp;%20gflags%E7%9A%84%E5%AE%89%E8%A3%85/</id>
    <published>2023-03-05T16:00:00.000Z</published>
    <updated>2023-04-10T10:27:23.948Z</updated>
    
    <content type="html"><![CDATA[<p>已经不知道是第多少次装Boost了, 这次就记录下相关的步骤吧. </p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>到<a href="http://www.boost.org/">boost</a>wget boost的安装包, 以boost_1_81_0.tar.gz为例<br>下载完成后进行解压缩. </p><h2 id="编译器设置"><a href="#编译器设置" class="headerlink" title="编译器设置"></a>编译器设置</h2><p>进入解压后产生的文件夹, 运行bootstrap.sh脚本</p><p><code>./bootstrap.sh --with-libraries=all --with-toolset=gcc</code></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p><code>./b2 toolset=gcc</code></p><p>出现: </p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">The Boost C++ Libraries were successfully built!</span><br><span class="line"></span><br><span class="line">The following directory should be added to compiler include paths:</span><br><span class="line"></span><br><span class="line">    /home/C_library/boost/boost_1_81_0</span><br><span class="line"></span><br><span class="line">The following directory should be added to linker library paths:</span><br><span class="line"></span><br><span class="line">    /home/C_library/boost/boost_1_81_0/stage/lib</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>查看gcc版本, 发现: </p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Configured with: ../src/configure -v --with-pkgversion=&#x27;Ubuntu 11.3.0-1ubuntu1~22.04&#x27; --with-bugurl=file:///usr/share/doc/gcc-11/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++,m2 --prefix=/usr</span><br></pre></td></tr></table></figure><p>所以boost也使用相同的prefix, 直接安装到gcc头文件目录和库文件目录下, 可以省略配置环境变量</p><p><code>./b2 install --prefix=/usr</code></p><p>cmake -DCMAKE_INSTALL_PREFIX=/thirdparty/gflags -DBUILD_SHARED_LIBS=ON -DGFLAGS_NAMESPACE=google -G”Unix Makefiles”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;已经不知道是第多少次装Boost了, 这次就记录下相关的步骤吧. &lt;/p&gt;
&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;到&lt;a href=&quot;http://www.boost.or</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>周记 - 2023 02.20-02.26</title>
    <link href="http://example.com/2023/02/22/%E5%91%A8%E8%AE%B0%20-%202023%2002.20-02.26/"/>
    <id>http://example.com/2023/02/22/%E5%91%A8%E8%AE%B0%20-%202023%2002.20-02.26/</id>
    <published>2023-02-21T16:00:00.000Z</published>
    <updated>2023-03-01T15:26:32.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="02-20-周一-晴"><a href="#02-20-周一-晴" class="headerlink" title="02.20 周一 晴"></a>02.20 周一 晴</h2><p>随便做了些codeforces SWERC ICPC的签到题(&lt;=R1500). R1300的题, 能直接双指针, 我还套了个二分上去. 是真的喜欢二分哈… </p><p>晚上跟一道R1800的交互题对线, 想了快1小时, 怼出来了, 猜数题, 归根结底又是逐位确定一个数. 不过要不是能看到错误样例, 估计要多花很多时间. </p><h2 id="02-21-周二-晴"><a href="#02-21-周二-晴" class="headerlink" title="02.21 周二 晴"></a>02.21 周二 晴</h2><p>今天上午无意间想起了12.18(南京站那天)的CSP认证. 想去看看难度如何, 于是就去CSP官网看了看, 刚好题目也放上去了. </p><p>首先当然是看看咱们的答辩T3大模拟难度如何, 没想到鼠标滚轮一下就滚到底了. 题面出人意料的短, 定睛一看题意也很简单, 大概意思就是对一个矩形进行花式遍历 + 套用公式. 可以说是有史以来最简单的T3了. </p><p>T2看了一眼, 感觉比T3难. 至少他涉及到了算法. 大概就是toposort + 自下向上的树形dp. 不得不说CSP的数据是真的弱, 代码有个逆天的BUG, 都能拿90分.  </p><p>T5 看了看, “区间连边”, 不是虚拟点就是线段树优化建图. 但是后者我掌握甚少, 打算明天系统学习一下, 顺便复习下线段树(我的数据结构水平连洛谷的线段树模板题2都敲不出来). </p><p>下午在yxc那学了会平衡树, 久光看了看视频, 就直接打扰了. yxc写的是旋转式的treap. 还没开始敲就知道自己搞不来. 所以我转而去学更加好写的split + merge的fhq 非旋式treap. 也算是对平衡树有了个初步认识. 不过以后就算遇到需要平衡树的题, 难题肯定是需要用到类似区间翻转之类的技术的, 我肯定也写不出来. 简单题我选择用pbds. </p><h2 id="02-22-周三-晴"><a href="#02-22-周三-晴" class="headerlink" title="02.22 周三 晴"></a>02.22 周三 晴</h2><p>今天一早在acwing上恰巧发现了昨天CSP T3”花式遍历”的简洁写法, 于是学习了下. </p><p>接下来便是痛苦的线段树优化建图的学习. 中午下午复习了线段树, 重温了懒标记. 补了一些线段树的基础题. 晚上对着maspy sensei的库学习具体RangeToRangeGraph的模板, 虽然maspy的模板也是基于zkw线段树的, 但是他并没有将线段树设成完全二叉树, 所以叶子节点不好区分. 学完之后拿来在codeforces 406D的模板题Legacy上试了试, 能过. </p><p>不过2022.12的CSP T5却样例都过不了. 纳闷了好久才发现样例的边权是带2的次幂的… 改过来之后, 再加上一个单汇多源最短路, 建个返图就行了. 最后骗了52分, 感觉还行. </p><h2 id="02-24-周四-多云"><a href="#02-24-周四-多云" class="headerlink" title="02.24 周四 多云"></a>02.24 周四 多云</h2><p>今晚打了小白月赛67, 体验是依托答辩. C题三角形切分那题题目也没说面积是否能为小数, 搞了一个多小时. D题是我自己sb了, 复制先前代码的时候忘记改符号了, 又得搞对拍. 然后用multiset又TLE. E题题意也是答辩. 看了半天样例才看懂, 最后5min才有思路, 其实就是倒着DP. 但是不完全对. 赛后5min才过. 不想鉴定hh. </p><h2 id="02-26-周日-晴"><a href="#02-26-周日-晴" class="headerlink" title="02.26 周日 晴"></a>02.26 周日 晴</h2><p>今天算是个值得纪念的日子, 因为就在今天, 我宣布<strong>LCJ正式进军钢琴界</strong>(虽然现在还莫得钱买真钢, 还是先拿家里的雅马哈小电子琴练着先). 下午花了一个下午, 尝试弹了弹拜厄的第11条: &lt;布谷鸟&gt;. 只能勉强把12小节谈下来, 不得不说是真的难. 首先难的便是识谱, 作为完全0基础选手, 只能一条线一条线地去数. 其次协调性也是大问题, 左右手经常打架, 是真的绝望… 不过听了下录音, 觉得还是有模有样的hhh. </p><p>晚上了解到妹妹之前玩的<Simply Piano> 这款APP, 手玩了下发现居然可以根据音频来评判弹奏是否正确. 可是会员贼贵, 一年得400了. 先试用一星期再说, 到时候再求助下万能的淘宝. </p><p>另外提一下今晚的ATC ABC 291. 发挥还行, 前期D题稍微卡了卡. 主要是看到”求方案数”, 我第一反应往组合计数上想了. 想了10min发现莫得思路. 于是看E, 发现E就是个类似差分约束的板子题. 直接toposort求最长路 + 判断是否为排列. 赛时30min的时候过掉了. 再反过来看D, 看到数据范围1e5, 这次很快转变思路, 想到了DP, 于是在第36min拿下. </p><p>本来没想着做出F的, 但是看了看好像又是那种比较能做的图论题. 类似删点最短路, 但又不完全像. 想着用线段树维护拓扑序区间内节点连边的最短路. 要维护区间最小值, 就要涉及到lazy_tag, 一涉及到lazy_tag, 我就寄. 毕竟总共就没做过几道线段树的题, 更别说lazy_tag了, 早知道之前下点功夫把maspy sensei的板子偷师下来, 放到自己的cp_library里面了. 怼了半天都没把样例怼出来. 最后zwl也觉得这种程度的图论题是应该做出来的, 哎真的难顶. 事后看了jiangly 发在B站的录像, 虽然也是起点终点求最短路, 但是他是枚举每一条边(u, v), 然后枚举(u, v)之间的点, 挨个去更新最小值. 我果然是思维僵尸hhh. </p><p>知足常乐咯, 表现分1300+, +30, 重新回到1100分. </p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回忆于：02.22日晚19点30分 &amp;&amp; 02.26日22点30分</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;02-20-周一-晴&quot;&gt;&lt;a href=&quot;#02-20-周一-晴&quot; class=&quot;headerlink&quot; title=&quot;02.20 周一 晴&quot;&gt;&lt;/a&gt;02.20 周一 晴&lt;/h2&gt;&lt;p&gt;随便做了些codeforces SWERC ICPC的签到题(&amp;lt;=R1</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>周记 - 2023 02.20-02.26</title>
    <link href="http://example.com/2023/02/22/%E5%91%A8%E8%AE%B0%20-%202023%2003.13-03.19/"/>
    <id>http://example.com/2023/02/22/%E5%91%A8%E8%AE%B0%20-%202023%2003.13-03.19/</id>
    <published>2023-02-21T16:00:00.000Z</published>
    <updated>2023-03-21T12:19:46.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="03-13-周一-晴"><a href="#03-13-周一-晴" class="headerlink" title="03.13 周一 晴"></a>03.13 周一 晴</h2><p>今天7点就起床了, 依旧是老爸送我去大德路的广东省中医院去做针灸治疗, 顺便去开中药. 这次是第三次做针灸治疗, 感觉每次扎针的穴位都不太一样. 由于周日就要回长沙了, 所以我只开了5天的药. </p><h2 id="03-14-周二-晴"><a href="#03-14-周二-晴" class="headerlink" title="03.14 周二 晴"></a>03.14 周二 晴</h2><p>考虑到我中期答辩必须得线下进行, 所以我还得在中期答辩(3月21号, 下周二)之前回学校. 所以我挂了窦教授早上的号, 希望他能给我做麻醉的肉毒素注射. 从窦教授那里得知现在已经改进了技术, 已经不再需要用球囊扩张了. </p><h2 id="03-15-周三-晴"><a href="#03-15-周三-晴" class="headerlink" title="03.15 周三 晴"></a>03.15 周三 晴</h2><h2 id="03-16-周四-晴"><a href="#03-16-周四-晴" class="headerlink" title="03.16 周四 晴"></a>03.16 周四 晴</h2><p>又是得早起, 老爸送我去省中医院做针灸. 本来想的是今天先去做针灸, 然后坐地铁到岗顶找窦教授打针的, 然而窦教授今天没出诊, 于是打针作罢, 只能下周. </p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回忆于：02.22日晚19点30分 &amp;&amp; 02.26日22点30分</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;03-13-周一-晴&quot;&gt;&lt;a href=&quot;#03-13-周一-晴&quot; class=&quot;headerlink&quot; title=&quot;03.13 周一 晴&quot;&gt;&lt;/a&gt;03.13 周一 晴&lt;/h2&gt;&lt;p&gt;今天7点就起床了, 依旧是老爸送我去大德路的广东省中医院去做针灸治疗, 顺便</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>周记 - 2023 02.13-02.19</title>
    <link href="http://example.com/2023/02/19/%E5%91%A8%E8%AE%B0%20-%202023%2002.13-02.19/"/>
    <id>http://example.com/2023/02/19/%E5%91%A8%E8%AE%B0%20-%202023%2002.13-02.19/</id>
    <published>2023-02-18T16:00:00.000Z</published>
    <updated>2023-03-01T15:12:27.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="02-15-周三-阴-大风"><a href="#02-15-周三-阴-大风" class="headerlink" title="02.15 周三 阴~大风"></a>02.15 周三 阴~大风</h2><p>今天早上得早起, 去中三三院对面那家 明兴康复中心 做食道测压检查. 早上早饭也没吃, 就出发了. 大概9点左右, 在岗顶路口遇到了JJJ同学, 我靠是真的巧了, 这波只能说直接”逮到”(Doge). 通过VX得知他大概也是45月份左右回学校. </p><p>这次食道测压麻醉方式跟之前不太一样, 护士是先拿普鲁卡因滴进去我的鼻子, 再插管的. 但是难受还是会有点难受的, 主要是吞咽的时候会有些许恶心感. 由于这次检查还是给窦教授测数据, 所以也没收费, 只是收了普鲁卡因的钱. 我从三院拿了药还回中心之后, 就直接回家了. </p><h2 id="02-16-周四-多云-大风"><a href="#02-16-周四-多云-大风" class="headerlink" title="02.16 周四 多云~大风"></a>02.16 周四 多云~大风</h2><p>今天来看窦教授的专家门诊, 主要是希望窦教授能帮我补1针or2针. 结果遇到了另一位不会打嗝的病友, 她是来自Melbourne University的, 她在reddit上有rcpd病友群, 据说有几万人. 她这次来也是参考下国内这边的打针情况. 窦教授说会安排专门的麻醉室来打针, 不过比较难约上. 希望早点约上吧qwq</p><h2 id="02-19-周日-阴"><a href="#02-19-周日-阴" class="headerlink" title="02.19 周日 阴"></a>02.19 周日 阴</h2><p>今天晚上的ATC ABC是真的悲催. 表现分直接干到了400+, 灰名水平… 哎主要卡了C, 当时我就知道这盘大势已去. 没想到D题没有仔细思考就上来写, 到最后才发现做法是假的. 感觉其实就是一道codeforces div2 B题难度的gcd规律题. 是真的难受啊. 直接-52. 掉下1100了. 离青名1200再一次远去. </p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回忆于：02.15日晚19点30分 &amp;&amp; 02.19</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;02-15-周三-阴-大风&quot;&gt;&lt;a href=&quot;#02-15-周三-阴-大风&quot; class=&quot;headerlink&quot; title=&quot;02.15 周三 阴~大风&quot;&gt;&lt;/a&gt;02.15 周三 阴~大风&lt;/h2&gt;&lt;p&gt;今天早上得早起, 去中三三院对面那家 明兴康复中心 </summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>事记 - 2022计算机保研回忆录</title>
    <link href="http://example.com/2023/02/16/%E4%BA%8B%E8%AE%B0%20-%202022%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%9D%E7%A0%94%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    <id>http://example.com/2023/02/16/%E4%BA%8B%E8%AE%B0%20-%202022%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BF%9D%E7%A0%94%E5%9B%9E%E5%BF%86%E5%BD%95/</id>
    <published>2023-02-15T16:00:00.000Z</published>
    <updated>2023-07-22T07:35:06.042Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>术语:<br>CS: 计算机科学<br>SE: 软件工程</p></blockquote><h2 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h2><ul><li><strong>本科院校</strong>: 湖南大学</li><li><strong>专业</strong>: 计算机科学与技术</li><li><strong>排名情况</strong>: 14/225(夏令营), 13/221(预推免). (这俩都是挑的最好的排名)</li><li><strong>外语水平</strong>: 四级629, 六级598. 自认为口语能过关.</li><li><strong>获奖及竞赛</strong>: 详见 <a href="https://lcj2021.github.io/about/">&lt;关于博主&gt;</a> 页面</li><li><strong>科研项目</strong>: 本校实验室实习一年半(产出CCF A类会议挂名一篇), 复旦大学大数据学院一学期的实习(无产出)经历</li><li><strong>最终去向</strong>: 复旦大学大数据学院</li></ul><h2 id="院校选择"><a href="#院校选择" class="headerlink" title="院校选择"></a>院校选择</h2><ul><li><strong>学校</strong>：北上广的高校(中山, 北航, 同济, 华东师, 华工 etc.) + 华五人(理想: 交&gt;复&gt;南&gt;浙&gt;科&gt;人)<br>  个人不太倾向研究所, 考虑到将来的选择, 可能更加注重title &amp;&amp; 身为广州人, 也更倾向于回家读书.</li><li><strong>硕/博</strong>：硕士博士都行, 但是优先硕士. 如果科研顺利可以转博.</li><li><strong>导师</strong>：人品 &gt; push程度 &gt; 学术能力<br>  人品rk first</li></ul><h2 id="夏令营"><a href="#夏令营" class="headerlink" title="夏令营"></a>夏令营</h2><table><thead><tr><th>学院</th><th>入营</th><th>优营</th></tr></thead><tbody><tr><td>人大信院</td><td>❌</td><td>-</td></tr><tr><td>复旦大数据</td><td>✔️</td><td>候补</td></tr><tr><td>南大CS</td><td>候补</td><td>放弃</td></tr><tr><td>南大SE</td><td>候补</td><td>放弃</td></tr><tr><td>科大大数据</td><td>候补</td><td>放弃</td></tr><tr><td>上交电院</td><td>❌</td><td>-</td></tr><tr><td>同济SE</td><td>❌</td><td>-</td></tr><tr><td>计算所</td><td>✔️</td><td>放弃</td></tr><tr><td>天大智算</td><td>✔️</td><td>放弃</td></tr><tr><td>自动化所</td><td>❌</td><td>-</td></tr><tr><td>北航CS</td><td>✔️</td><td>✔️</td></tr><tr><td>华东师SE</td><td>✔️</td><td>✔️</td></tr><tr><td>中山CS</td><td>❌</td><td>-</td></tr><tr><td>华工CS</td><td>❌</td><td>-</td></tr><tr><td>哈深CS</td><td>❌</td><td>-</td></tr><tr><td>武大CS</td><td>❌</td><td>-</td></tr><tr><td>华科CS</td><td>❌</td><td>-</td></tr></tbody></table><blockquote><p>P.S.</p><p>中山大学: 由于个人操作疏忽, 在报名时, 忘记将最重要的盖了校章的资料上传了. 导致尽管有一群海王放弃, 开放第二波入营, 我也没能入营. 可以说是彻底无缘了.</p><p>南京大学CS &amp;&amp; SE: 并不是一批次入营, 而是在第二批入营的. 可是和华东师大的最终面试汇报冲突了, 权衡风险利弊(南大408大概率成为炮灰, 华东师范当时已经通过了笔试和导师面试)后还是选择了放弃.</p><p>科大大数据: 大概率是由于rk过低, 只能候补入营. 最后也没后补上.</p><p>清北的一些研究院也都投了, 显然白给hhh</p></blockquote><h3 id="华东师范大学-SE"><a href="#华东师范大学-SE" class="headerlink" title="华东师范大学 SE"></a>华东师范大学 SE</h3><p>ECNU的系统可以填报2个志愿, 所以我CS和SE都填了. 可是令我意外的是居然入了SE的夏令营, 听说ECNU有oq机制, 没想到居然放我入了SE. 具体考核的话, 分为机试 + 导师面试(包括看论文) + 个人汇报, 过程还是十分繁琐的, 这也算是筛除海王的一种方式吧.</p><h4 id="Stage1-机试"><a href="#Stage1-机试" class="headerlink" title="Stage1: 机试"></a>Stage1: 机试</h4><p>ECNU的机试是出了名的难. 这次我算是亲身体会到了. 总共3题. T1就按照题意模拟, 但我找不出BUG. T2感觉像是树形dp, 不过保守估计难度对应于codeforces 2000+分. T3是感觉像是删边最短路, 直接打扰, 不配看题. </p><p>还好是IOI赛制, 最后T1 WA了一个点85pt, T2瞎搞DP, 骗了30pt. T3爆零. 85+30+0=115pt. 有一说一T3直接暴力二进制枚举所有边, 可能还是可以骗些分的. 总体来说感觉还行.</p><h4 id="Stage2-导师单面"><a href="#Stage2-导师单面" class="headerlink" title="Stage2: 导师单面"></a>Stage2: 导师单面</h4><p>ECNU要求联系学院的一位老师, 联系好之后加了老师的QQ. 之后老师安排我阅读他的一篇<strong>长文</strong>. 我当时没注意到长文这一条件, 再加上当时在上苦逼的编译器小学期课, 天天在院楼苦逼地罚坐, 所以我临面试前一天赶忙看了看一篇短文, 大致是时空数据挖掘, 众包方向的A刊文章.</p><blockquote><p>P.S.</p><p>我还了解到我联系的这位老师和他所在的实验室都是热门, 他还跟我说学硕名额十分有限. 意思懂的都懂qwq</p></blockquote><p>面试首先要求我汇报文章的主要内容, 然后老师提问了我对于实时性要求更高的场景, 能不能提出在线的算法, 我想了想瞎扯了下, 老师似乎不是很满意.</p><p>其次便是算法考核. T1是问给定一个数组a, 要求把这个数组分成2组, 使得两组的总和尽可能接近. 这题还算比较简单, 就是一个简单的背包dp, 目标物品价值便是1/2的数组总和. 老师听了似乎不是很满意, 要求我给出证明, 我只得面试结束后给他发过去. T2看似是最小生成树的问题, 但是没想到怎么建图, 所以我就说二分答案. 老师似乎不太理解我的意思. 到这里面试便草草结束.</p><p>无论是机试的考核内容和难度, 还是单独面试的算法考核, 都不难看出ECNU SE 对于编程和算法的要求都是蛮高的. </p><h4 id="Stage3-最终汇报"><a href="#Stage3-最终汇报" class="headerlink" title="Stage3: 最终汇报"></a>Stage3: 最终汇报</h4><p>ECNU要求我们准备一个自我介绍的PPT, 然后在PPT内要放上Stage2所汇报的论文的内容. 汇报当天我在等候面试排队的时候, NJU CS的机试恰好开始了, NJU的小姐姐打电话来说要提前进场准备验证身份, 还说不参加要提前说. 没得办法, 只好先拖住了. 然鹅到NJU机试开始, 我都没能排队进入最终汇报, 只能打电话到NJU说放弃机试. 最终面试可以选择中英文汇报, 我由于时间仓促, 选择了中文. 到最后有个导师群面, 导师们用英文提问, 我只记得一个问题是介绍我在本校实验室所做的工作, 勉强支支吾吾答上来了.</p><p>最后夏令营闭幕式上会宣布优营成员, 还通过邮件发了优营证书, 属于是十分有心了. 我看优营还有SJTU的大佬, 属实打扰了.</p><h3 id="北京航空航天大学-CS"><a href="#北京航空航天大学-CS" class="headerlink" title="北京航空航天大学 CS"></a>北京航空航天大学 CS</h3><p>北航没有因为我过低的rank就把我筛掉, 估计是看在我那一丢丢算法竞赛经历的面子上才放我入营的. 知遇之恩, 由是感激.</p><p>北航考核方式是<strong>机试+面试</strong>.</p><h4 id="Stage1-机试-1"><a href="#Stage1-机试-1" class="headerlink" title="Stage1: 机试"></a>Stage1: 机试</h4><p>北航的机试一直都是以码农题著称, 我看了下往年的机试题, 感觉是难度还能接受的两道大模拟(低于CSP T3), 没想到今年的模拟这么逆天…</p><p>赛制是恶心的OI赛制. 可以用CSP的成绩来抵, 并且语言限定C++. 不过我CSP分数实在过低过于感人, 所以我还是来考机试了.</p><p>T1是字符串处理 + 结构体排序. 由于是线上机试, 所以拥有东道主优势(doge). 其实是自己的键盘快捷键ide自己比较熟悉啦. T1应该拿满60了, 因为我T2实在是没办法, 所以自己造了几组数据梭哈T1.</p><p>T2是关于编译原理的应用的巨大模拟之依托答辩, 实在难以模拟, 写不出来就输出样例想骗一下分. 不过这次机试好像并没有筛人, 但是机试很明显是算在了面试总评里面的.</p><p>赛后在腾讯会议看到了自己的高中同学, 西电acm知名选手et3_tsy. 我俩刚好在同一个房间, 祝福他能取得优异的成绩. 赛后我俩交流才发现T2连他这种巨佬都没干过, 区分度属实有点过于低了.</p><h4 id="Stage2-导师群面"><a href="#Stage2-导师群面" class="headerlink" title="Stage2: 导师群面"></a>Stage2: 导师群面</h4><p>面试是压力面, 内容包括<strong>政治+408+数学+英语</strong>, 面试问题汇总如下：</p><ul><li>如今正处百年未有之大变局, 我们身为青年应该作为</li><li>函数极限的定义, 用\epsilon-N语言来描述</li><li>同时抛两个硬币, 其中一个是正面, 问另一个是正面的概率</li><li>一个随机生成的01串, 口述一个算法能够统计其中的最长连续1的子串长度.</li><li>续上述问题, 长度为10000, 最长的连续1的子串长度期望大概是多少.</li><li>为什么要创建网络层</li><li>电话号码 IP相关? (记不清了)</li></ul><p>之前在知乎经验贴上看到北航的面试很硬核. やはりや, 北航的夏令营确实是一种压力面, 就是那种几个老师会一起怼你的那种, 丝毫不会放松进攻节奏. 问到T4时我直接脱口而出dp, dp[i]表示以第i个字符作为结尾的1子串最大长度, 从dp[i-1]到dp[i]分为00, 01, 10, 11四种转移. 复杂度O(n). しかし, 接下来的T5我直接就傻了. 概率期望类的题我一向不擅长, 我仔细想了想状态设计. 可能是我误解了老师的问题, 老师打断我说大概给出一个数字. 我就瞎蒙了个10+给他们. 到此为止, 可以看得出老师们对于我以上的回答都是挺满意的.</p><p>然鹅接下来的问题直接就拉低了我的分数. 一位老师直接开始问计网相关的问题… “哦豁~完蛋!” 要知道咱的计网可是hsr教的呀(保研成绩单上扫一眼, 计网分数显著低的同学肯定是咱78班的. doge).</p><p>最终在我等复旦候补的时候, 打电话问我确认意向, 得知录到了计算机学院的0835 软件工程, 感觉已经很不错了.</p><p>北航最终认可了我, 再加上我的队友zwling也最终去北航了, 因此北航在我心目中第好感度和地位直接排进前3.</p><h3 id="天大智算"><a href="#天大智算" class="headerlink" title="天大智算"></a>天大智算</h3><p>天大属于海王营. 首先参加机试, 机试难度 &lt; codeforces div4, 感觉很多人都能AK. 但是是OI赛制, 就很烦. 我提前大约20分钟完成. 但是没注意到最后一题的公式弄错了个地方, 估计那题爆零了qwq. 最后居然在Q群上说机试仅作为参考? 迷惑行为了属于是. 后续我也没参加了.</p><h3 id="计算所"><a href="#计算所" class="headerlink" title="计算所"></a>计算所</h3><p>计算所我报名的是”网络数据科学与技术重点实验室”, 其实是实在很难找到方向匹配的导师, 这个已经是找的相对匹配些的了. 入营邮件是群发的, 一看其他邮件的二级域名, pku, tongji, 实在是打扰了. 虽然最后也没想着参加机试, 但还是先回复了:”lcj+确认参加”. 结果最后还是没去参加机试.</p><h2 id="预推免"><a href="#预推免" class="headerlink" title="预推免"></a>预推免</h2><p>夏令营拿到了北航CS和华师SE的offer可以作为保底, 同时争取下复旦的候补, 此时我已经身心俱疲, 于是开摆. 只报了南大的CS, 估计是被拉黑了, 没能入营(虽然我知道就算入营了也不可能卷过408大关, 拿到0812学硕).</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回忆于: 02.15日晚19点30分</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;术语:&lt;br&gt;CS: 计算机科学&lt;br&gt;SE: 软件工程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;个人情况&quot;&gt;&lt;a href=&quot;#个人情况&quot; class=&quot;headerlink&quot; title=&quot;个人情况&quot;&gt;&lt;/a&gt;个人情况&lt;/h2&gt;&lt;u</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux - WSL2 下使用宿主机代理</title>
    <link href="http://example.com/2023/02/14/Linux%20-%20WSL2%20%E4%B8%8B%E4%BD%BF%E7%94%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2023/02/14/Linux%20-%20WSL2%20%E4%B8%8B%E4%BD%BF%E7%94%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%BB%A3%E7%90%86/</id>
    <published>2023-02-13T16:00:00.000Z</published>
    <updated>2023-02-15T13:26:37.634Z</updated>
    
    <content type="html"><![CDATA[<p>WSL2科学上网</p><p>前言: 情人节当天搞了一晚上… 最后参考的这篇才成功 <a href="https://www.cnblogs.com/tuilk/p/16287472.html">https://www.cnblogs.com/tuilk/p/16287472.html</a>,</p><h2 id="1-Windows下打开代理"><a href="#1-Windows下打开代理" class="headerlink" title="1. Windows下打开代理"></a>1. Windows下打开代理</h2><h3 id="1-1-允许局域网"><a href="#1-1-允许局域网" class="headerlink" title="1.1 允许局域网"></a>1.1 允许局域网</h3><p>以<code>Clash</code>为例, 购买相关<code>配置</code>, 选择<code>主页</code>选项卡, 开启<code>允许局域网</code>:</p><p><img src="https://img2022.cnblogs.com/blog/2026333/202205/2026333-20220519095954875-534125057.png"></p><h3 id="1-2-开启防火墙"><a href="#1-2-开启防火墙" class="headerlink" title="1.2 开启防火墙"></a>1.2 开启防火墙</h3><p>打开<code>Windows Defender 防火墙</code>, 选择<code>允许应用或功能通过 Windows Defender 防火墙</code>:</p><p><img src="https://img2022.cnblogs.com/blog/2026333/202205/2026333-20220519100052696-2100542151.png"></p><p>点击<code>更改设置</code>, 找到<code>Clash for Windows</code>, 然后勾选<code>专用</code>和<code>公用</code>:</p><p><img src="https://img2022.cnblogs.com/blog/2026333/202205/2026333-20220519100127832-1936469422.png"></p><blockquote><p>如果找不到<code>Clash for Windows</code>, 点击下方的<code>允许其他应用</code>, 然后找到安装路径, 将<code>Clash for Windows.exe</code>文件加入进来.</p></blockquote><h2 id="2-配置WSL2-bashrc-长期配置"><a href="#2-配置WSL2-bashrc-长期配置" class="headerlink" title="2. 配置WSL2(.bashrc 长期配置)"></a>2. 配置WSL2(.bashrc 长期配置)</h2><p>写脚本, 放到脚本文件夹. 通过在.bashrc里配置alias调用脚本, 实现proxy的快速set和unset.</p><p>新建<code>proxy.sh</code>脚本:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">hostip=$(cat /etc/resolv.conf | grep nameserver | awk &#x27;&#123; print $2 &#125;&#x27;)</span><br><span class="line">wslip=$(hostname -I | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">port=7890</span><br><span class="line"></span><br><span class="line">PROXY_HTTP=&quot;http://$&#123;hostip&#125;:$&#123;port&#125;&quot;</span><br><span class="line"></span><br><span class="line">set_proxy()&#123;</span><br><span class="line">  export http_proxy=&quot;$&#123;PROXY_HTTP&#125;&quot;</span><br><span class="line">  export HTTP_PROXY=&quot;$&#123;PROXY_HTTP&#125;&quot;</span><br><span class="line"></span><br><span class="line">  export https_proxy=&quot;$&#123;PROXY_HTTP&#125;&quot;</span><br><span class="line">  export HTTPS_proxy=&quot;$&#123;PROXY_HTTP&#125;&quot;</span><br><span class="line"></span><br><span class="line">  export ALL_PROXY=&quot;$&#123;PROXY_SOCKS5&#125;&quot;</span><br><span class="line">  export all_proxy=$&#123;PROXY_SOCKS5&#125;</span><br><span class="line"></span><br><span class="line">  git config --global http.https://github.com.proxy $&#123;PROXY_HTTP&#125;</span><br><span class="line">  git config --global https.https://github.com.proxy $&#123;PROXY_HTTP&#125;</span><br><span class="line"></span><br><span class="line">  echo &quot;Proxy has been opened.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unset_proxy()&#123;</span><br><span class="line">  unset http_proxy</span><br><span class="line">  unset HTTP_PROXY</span><br><span class="line">  unset https_proxy</span><br><span class="line">  unset HTTPS_PROXY</span><br><span class="line">  unset ALL_PROXY</span><br><span class="line">  unset all_proxy</span><br><span class="line">  git config --global --unset http.https://github.com.proxy</span><br><span class="line">  git config --global --unset https.https://github.com.proxy</span><br><span class="line"></span><br><span class="line">  echo &quot;Proxy has been closed.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test_setting()&#123;</span><br><span class="line">  echo &quot;Host IP:&quot; $&#123;hostip&#125;</span><br><span class="line">  echo &quot;WSL IP:&quot; $&#123;wslip&#125;</span><br><span class="line">  echo &quot;Try to connect to Google...&quot;</span><br><span class="line">  resp=$(curl -I -s --connect-timeout 5 -m 5 -w &quot;%&#123;http_code&#125;&quot; -o /dev/null www.google.com)</span><br><span class="line">  if [ $&#123;resp&#125; = 200 ]; then</span><br><span class="line">    echo &quot;Proxy setup succeeded!&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;Proxy setup failed!&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ &quot;$1&quot; = &quot;set&quot; ]</span><br><span class="line">then</span><br><span class="line">  set_proxy</span><br><span class="line"></span><br><span class="line">elif [ &quot;$1&quot; = &quot;unset&quot; ]</span><br><span class="line">then</span><br><span class="line">  unset_proxy</span><br><span class="line"></span><br><span class="line">elif [ &quot;$1&quot; = &quot;test&quot; ]</span><br><span class="line">then</span><br><span class="line">  test_setting</span><br><span class="line">else</span><br><span class="line">  echo &quot;Unsupported arguments.&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意: 其中第4行的<code>&lt;PORT&gt;</code>更换为自己的代理端口号.</p></blockquote><ul><li><code>source ./proxy.sh set</code>: 开启代理</li><li><code>source ./proxy.sh unset</code>: 关闭代理</li><li><code>source ./proxy.sh test</code>: 查看代理状态</li></ul><h3 id="2-1-任意路径下开启代理"><a href="#2-1-任意路径下开启代理" class="headerlink" title="2.1 任意路径下开启代理"></a>2.1 任意路径下开启代理</h3><p>可以在<code>~/.bashrc</code>中添加如下内容, 并将其中的路径修改为上述脚本的路径:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias proxy=&quot;source /path/to/proxy.sh&quot;</span><br></pre></td></tr></table></figure><p>然后输入如下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>那么可以直接在任何路径下使用如下命令:</p><ul><li><code>proxy set</code>: 开启代理</li><li><code>proxy unset</code>: 关闭代理</li><li><code>proxy test</code>: 查看代理状态</li></ul><h3 id="2-2-验证"><a href="#2-2-验证" class="headerlink" title="2.2 验证"></a>2.2 验证</h3><p>使用<code>curl</code>即可验证代理是否成功, 如果有返回值则说明代理成功.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.google.com</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WSL2科学上网&lt;/p&gt;
&lt;p&gt;前言: 情人节当天搞了一晚上… 最后参考的这篇才成功 &lt;a href=&quot;https://www.cnblogs.com/tuilk/p/16287472.html&quot;&gt;https://www.cnblogs.com/tuilk/p/162874</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Network" scheme="http://example.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>周记 - 2023 02.06-02.12</title>
    <link href="http://example.com/2023/02/14/%E5%91%A8%E8%AE%B0%20-%202023%2002.06-02.12/"/>
    <id>http://example.com/2023/02/14/%E5%91%A8%E8%AE%B0%20-%202023%2002.06-02.12/</id>
    <published>2023-02-13T16:00:00.000Z</published>
    <updated>2023-02-15T12:12:25.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="02-10-周五-多云-阴"><a href="#02-10-周五-多云-阴" class="headerlink" title="02.10 周五 多云~阴"></a>02.10 周五 多云~阴</h2><p>今天晚上参加了晚上7点的小白月赛66. 开局上来就被A搞了快10分钟. B更是因为没讨论 A &lt;= B的情况调到40分钟. D题一开始也是不会做, 不过好在发现了平方式的用意. 最后还剩半个多小时做E, 想了会发现是道完全图的构造题. 想着用set insert + erase + lower_bound 3e5次(2s时限)硬怼构造边权, 不过没写完. 赛后写完交了, TLE. やはり(yahari 果然)还是找出边权递增的顺序去赋值边权才行. </p><blockquote><p>后话: 其实set硬怼也行, 不过得用到 霓虹大神maspy的 <a href="https://maspypy.github.io/library/ds/fastset.hpp">fastset</a></p></blockquote><p>最后四题, 感觉我做E的时候还是太呆了. WF说要暂不返校要填表, 而且明天之前就要截止了. 我想着没啥理由, 然后就打了个嗝, 不过不是很畅通, 是那种嘶哑的, 心想之前考虑打 “加强针” (中间右边再补针). 不如趁这个机会打了得了, 所以就这么填了. </p><h2 id="02-11-周六-多云-阴"><a href="#02-11-周六-多云-阴" class="headerlink" title="02.11 周六 多云~阴"></a>02.11 周六 多云~阴</h2><p>早上补昨晚小白月赛66的F题, 发现好像是个挺简单的一眼二分 + 尝试性贪心(只用从后往前合并和从前往后合并两种, 枚举下就知道哪个更优了). </p><p>晚上打ABC 289. 前四题依然慢速, 做了20+分钟… 尤其是B题别人用题目性质 + 双指针很快写完, 我还用并查集硬怼模拟. C题二进制枚举看半天题. D题因为转为index 0 based党, 所以dp方式也改成了刷表法. しかし(shi ka shi 可是) vector开小了, RE了一发. E题想了一个小时, 最后灵光一现想到了之前都没试过的bfs方法, 担心复杂度问题. 但是也没时间管那么多了, 直接写完就交了, 没想到能过. 以为是O(n^2)的, 其实是O(m^2)的, 都没看到边数m &lt;= 2000. 属于是瞎猫撞上死耗子了. </p><p>表现分1364, +29来到1138. 离青名只差62分了, がんばって (顽张って ga n ba te加油)!</p><h2 id="02-12-周日-多云-小雨"><a href="#02-12-周日-多云-小雨" class="headerlink" title="02.12 周日 多云~小雨"></a>02.12 周日 多云~小雨</h2><p>中午起床收到微信下午开组会. やはり还是得继续科研进度. 开会讨论后, 认为应该从下游任务的实际实验效果看看. 所以得用到分布式图计算的环境. 但是我之前除了gstore外就没用过其他框架了. 问了蔡学长, 得知服务器集群得校园网访问. 实在难顶. </p><p>下午4点 场的codeforces 852 div2. 难得不是阴间时间. 直接炸穿. A40+分钟才过. 哎情况没讨论好, 多写了if, 其实都要考虑的. B一开始看到了条件”数组元素绝对值之差为1”, 后面又忘了这个条件了. C吃完饭后回来才写完. </p><p>表现分只有不到1000分呢. 我直接好家伙, 上个青名都费劲, 我好像只配打div3和div4. 哎谁让我上次div4没把握好机会呢? 要是上次写慢些, 老老实实把树状数组写了, 再检查好二分边界, 也没那么多烦事了. 不过呢, 这点掉分只能说是小问题, 打还是会继续打的. 只是cf这种rated波动那么大的比赛, 不如直接彻底开摆得了. 这样得失心放轻些, 说不定还能表现得正常些. 下次div2我想直接从C或D开始干了, 效仿rainboy大神. </p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回忆于：02.15日晚19点30分</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;02-10-周五-多云-阴&quot;&gt;&lt;a href=&quot;#02-10-周五-多云-阴&quot; class=&quot;headerlink&quot; title=&quot;02.10 周五 多云~阴&quot;&gt;&lt;/a&gt;02.10 周五 多云~阴&lt;/h2&gt;&lt;p&gt;今天晚上参加了晚上7点的小白月赛66. 开局上来就被</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>题解 - AtCoder Beginner Contest 289 A-E</title>
    <link href="http://example.com/2023/02/11/%E9%A2%98%E8%A7%A3%20-%20AtCoder%20Beginner%20Contest%20289%20A-E/"/>
    <id>http://example.com/2023/02/11/%E9%A2%98%E8%A7%A3%20-%20AtCoder%20Beginner%20Contest%20289%20A-E/</id>
    <published>2023-02-10T16:00:00.000Z</published>
    <updated>2023-02-15T13:25:48.137Z</updated>
    
    <content type="html"><![CDATA[<p>+29! 表现分1364, 历史第二高, 感觉不错. </p><p>E题冥思苦想想了1个多小时, 最后灵光一现想到了之前都没试过的bfs方法, 担心复杂度问题. 但是也没时间管那么多了, 直接写完就交了, 没想到能过. </p><h2 id="A-flip"><a href="#A-flip" class="headerlink" title="A. flip"></a><a href="https://atcoder.jp/contests/abc287/tasks/abc289_a">A. flip</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>将给定的01串s, 进行01翻转后输出</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;   cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;0&#x27;</span>)   cout &lt;&lt; <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-V"><a href="#B-V" class="headerlink" title="B. V"></a><a href="https://atcoder.jp/contests/abc287/tasks/abc289_b">B. V</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>我是直接按照题意用并查集模拟了整个过程. 对于</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == p[x] ? p[x] : p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">    u = <span class="built_in">find</span>(u), v = <span class="built_in">find</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line">    p[u] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;   cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a)   cin &gt;&gt; x, x --;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">wcc</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">iota</span>(p, p + n, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">        <span class="built_in">merge</span>(x, x + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        wcc[<span class="built_in">find</span>(i)].<span class="built_in">pb</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(<span class="built_in">all</span>(wcc[i]));</span><br><span class="line">        <span class="built_in">reverse</span>(<span class="built_in">all</span>(wcc[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)    S.<span class="built_in">insert</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (S.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> now = *S.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : wcc[<span class="built_in">find</span>(now)]) &#123;</span><br><span class="line">            cout &lt;&lt; x + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            S.<span class="built_in">erase</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Coverage"><a href="#C-Coverage" class="headerlink" title="C. Coverage"></a><a href="https://atcoder.jp/contests/abc287/tasks/abc289_c">C. Coverage</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>二进制枚举</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;   cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector <span class="title">S</span><span class="params">(m, vector&lt;<span class="type">int</span>&gt;(n))</span></span>;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> c;  cin &gt;&gt; c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; c; ++ j) &#123;</span><br><span class="line">            <span class="type">int</span> x;  cin &gt;&gt; x;   x --;</span><br><span class="line">            S[i][x] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> val = <span class="number">0</span>; val &lt; (<span class="number">1</span> &lt;&lt; m); ++ val) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">has</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">0</span>; b &lt; m; ++ b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (val &gt;&gt; b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="keyword">if</span> (S[b][i]) &#123;</span><br><span class="line">                    has[i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">accumulate</span>(<span class="built_in">all</span>(has), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (sum == n) &#123;</span><br><span class="line">            ++ ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">LOG</span>(ans)</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Step-Up-Robot"><a href="#D-Step-Up-Robot" class="headerlink" title="D. Step Up Robot"></a><a href="https://atcoder.jp/contests/abc287/tasks/abc289_d">D. Step Up Robot</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>dp[i]表示i点能否从0到达. 我用的刷表法, 每个i点更新n个新状态. </p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;  cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a)   cin &gt;&gt; x;</span><br><span class="line">    <span class="type">int</span> m;  cin &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">is_trap</span><span class="params">(<span class="number">200&#x27;000</span> + <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> x;  cin &gt;&gt; x;</span><br><span class="line">        is_trap[x] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x;  cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">200&#x27;000</span> + <span class="number">10</span>)</span></span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= x; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_trap[i])     <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> inc : a) &#123;</span><br><span class="line">            dp[i + inc] |= dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">LOG</span>(dp[x])</span><br><span class="line">    <span class="keyword">if</span> (dp[x]) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Swap-Places"><a href="#E-Swap-Places" class="headerlink" title="E. Swap Places"></a><a href="https://atcoder.jp/contests/abc287/tasks/abc289_e">E. Swap Places</a></h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>新套路get. 难得赛时能想出这种没见过的东西. </p><p>两点绑定在一起进行 bfs. </p><p>queue 的元素为/[当前a所在节点, 当前b所在节点, 已经走过的步数/]</p><p>同时用dp[i][j]表示a到i, 且同时b到j的最小步数</p><p>每个状态只会入队出队一次, 复杂度O(n2)</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;   cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">c</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : c)   cin &gt;&gt; x;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;   cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        u --, v --;</span><br><span class="line">        g[u].<span class="built_in">pb</span>(v);</span><br><span class="line">        g[v].<span class="built_in">pb</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, inf)); <span class="comment">// </span></span><br><span class="line">    dp[<span class="number">0</span>][n - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;array&lt;<span class="type">int</span>, 3&gt;&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, n - <span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [ca, cb, cd] = q.<span class="built_in">front</span>();  q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (ca == n - <span class="number">1</span> &amp;&amp; cb == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; cd &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> na : g[ca]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> nb : g[cb]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c[na] == !c[nb] &amp;&amp; dp[na][nb] &gt; dp[ca][cb] + <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[na][nb] = dp[ca][cb] + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;na, nb, dp[na][nb]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="A-flip-1"><a href="#A-flip-1" class="headerlink" title="A. flip"></a><a href="https://atcoder.jp/contests/abc287/tasks/abc289_a">A. flip</a></h2><h3 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h3><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;+29! 表现分1364, 历史第二高, 感觉不错. &lt;/p&gt;
&lt;p&gt;E题冥思苦想想了1个多小时, 最后灵光一现想到了之前都没试过的bfs方法, 担心复杂度问题. 但是也没时间管那么多了, 直接写完就交了, 没想到能过. &lt;/p&gt;
&lt;h2 id=&quot;A-flip&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="题解" scheme="http://example.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法_DP" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95-DP/"/>
    
    <category term="算法_最短路" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    <category term="算法_并查集" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    <category term="算法_图论" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95-%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>周记 - 2023 01.30-02.05</title>
    <link href="http://example.com/2023/02/06/%E5%91%A8%E8%AE%B0%20-%202023%2001.30-02.05/"/>
    <id>http://example.com/2023/02/06/%E5%91%A8%E8%AE%B0%20-%202023%2001.30-02.05/</id>
    <published>2023-02-05T16:00:00.000Z</published>
    <updated>2023-02-15T12:12:46.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="02-03-周五-多云-小雨"><a href="#02-03-周五-多云-小雨" class="headerlink" title="02.03 周五 多云~小雨"></a>02.03 周五 多云~小雨</h2><p>今天主要参加了晚上10点半的div4 849. 开局虽然又被E (R1100)卡了下, 不过还是很快能搞定. F题一开始想不到好做法, 本来打算写树状数组, 但是没整理板子, 区间修改之类的又得重新写, 所以就投机取巧试了试用set维护还能修改的坐标. 一交, 诶居然能过. 然后就没理了. </p><p>G1和G2我一开始以为做了G2, G1也能一起交. 所以G1的罚时多了很多. G2我一开始想错了, 不过还是很快想到了二分. 并且很快写完了. 一看才400+人过. 暗自窃喜. 正式榜甚至进了首页, 表现分高达2050! zwling还觉得我能直接上蓝.  </p><p>没想到小丑竟是我自己…F和G2都FST了. 早知道F老老实实写区间修改 + 单点查询 树状数组了. G2是因为二分边界<code>l = 0</code>写成了<code>l = 1</code>. 我是真的讨厌这种下标从0开始, 从1开始的臭东西. 以后想坚定做下标0-base党了. 不过看到G2居然是R1900的题, 十分震惊. 感觉其他R1900的题比他难得不止一点半点. </p><h2 id="02-04-周六-小雨-中雨"><a href="#02-04-周六-小雨-中雨" class="headerlink" title="02.04 周六 小雨~中雨"></a>02.04 周六 小雨~中雨</h2><p>晚上有Atcoder Beginner Contest 288. 8点麻木地开打, 前两题签完到, C题经典手速慢的惊人, 一开始写toposort, 发现不对劲, 才改并查集. D题罚坐1个半小时, 一看全场就800+过, 是真的逆天. 属于那种大聪明之差分性质挖掘题. rk2000+, 直接完蛋, 不过最终-6. Atcoder yyds!</p><h2 id="02-05-周日-小雨"><a href="#02-05-周日-小雨" class="headerlink" title="02.05 周日 小雨"></a>02.05 周日 小雨</h2><p>晚上8点 tourist场的div2. 难得不是阴间时间, 但是考虑到tourist出题, 上次div1+div2合并场的A都给我干趴下了. 这次也不例外, A1 + A2直接给我整了半个小时. B题又是上下限约束题, 想了挺久才想出来. C题贪心, 但是本来1层循环4行的东西, 我写了一堆if 的答辩东西. 还WA了一发. 一看rk2000+. 好家伙我赛前看见register人数18000+, 现在只有7000+提交, 是真的逆天. 不过还好一分没丢没涨. </p><p>D结论瞎撞撞对了, 不过是真的难写. 其实主要是我的思路十分混乱, 其实只用把每个人视作多个 &lt;need char, give char&gt; 就行了. 先是恰好互补的人交换. 交换完剩下的一定只有3种人, 这3种人恰好能组成交换环. </p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>回忆于：02.06日晚22点</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;02-03-周五-多云-小雨&quot;&gt;&lt;a href=&quot;#02-03-周五-多云-小雨&quot; class=&quot;headerlink&quot; title=&quot;02.03 周五 多云~小雨&quot;&gt;&lt;/a&gt;02.03 周五 多云~小雨&lt;/h2&gt;&lt;p&gt;今天主要参加了晚上10点半的div4 849</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>笔记 - CP模板</title>
    <link href="http://example.com/2023/02/06/%E7%AC%94%E8%AE%B0%20-%20CP%E6%A8%A1%E6%9D%BF/"/>
    <id>http://example.com/2023/02/06/%E7%AC%94%E8%AE%B0%20-%20CP%E6%A8%A1%E6%9D%BF/</id>
    <published>2023-02-05T16:00:00.000Z</published>
    <updated>2023-03-06T12:28:58.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FOR-MORE"><a href="#FOR-MORE" class="headerlink" title="FOR MORE"></a>FOR MORE</h1><p>Please refer to <a href="https://lcj2021.github.io/cp_library/">channing’s cp_library</a></p><h2 id="计数模板"><a href="#计数模板" class="headerlink" title="计数模板"></a>计数模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">const</span> <span class="type">int</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ModInt</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> <span class="type">int</span> mod = T;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">ModInt</span>(<span class="type">int</span> x = <span class="number">0</span>) : <span class="built_in">x</span>(x % mod) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">val</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    ModInt <span class="keyword">operator</span> + (<span class="type">const</span> ModInt &amp;a) <span class="type">const</span> &#123; <span class="type">int</span> x0 = x + a.x; <span class="keyword">return</span> <span class="built_in">ModInt</span>(x0 &lt; mod ? x0 : x0 - mod); &#125;</span><br><span class="line">    ModInt <span class="keyword">operator</span> - (<span class="type">const</span> ModInt &amp;a) <span class="type">const</span> &#123; <span class="type">int</span> x0 = x - a.x; <span class="keyword">return</span> <span class="built_in">ModInt</span>(x0 &lt; <span class="number">0</span> ? x0 + mod : x0); &#125;</span><br><span class="line">    ModInt <span class="keyword">operator</span> * (<span class="type">const</span> ModInt &amp;a) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(<span class="number">1LL</span> * x * a.x % mod); &#125;</span><br><span class="line">    ModInt <span class="keyword">operator</span> / (<span class="type">const</span> ModInt &amp;a) <span class="type">const</span> &#123; <span class="keyword">return</span> *<span class="keyword">this</span> * a.<span class="built_in">inv</span>(); &#125;</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span> += (<span class="type">const</span> ModInt &amp;a) &#123; x += a.x; <span class="keyword">if</span> (x &gt;= mod) x -= mod; &#125;</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span> -= (<span class="type">const</span> ModInt &amp;a) &#123; x -= a.x; <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x += mod; &#125;</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span> *= (<span class="type">const</span> ModInt &amp;a) &#123; x = <span class="number">1LL</span> * x * a.x % mod; &#125;</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span> /= (<span class="type">const</span> ModInt &amp;a) &#123; *<span class="keyword">this</span> = *<span class="keyword">this</span> / a; &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span> &lt;&lt; (ostream &amp;os, <span class="type">const</span> ModInt &amp;a) &#123; <span class="keyword">return</span> os &lt;&lt; a.x;&#125;</span><br><span class="line">    <span class="keyword">friend</span> istream &amp;<span class="keyword">operator</span> &gt;&gt; (istream &amp;os, <span class="type">const</span> ModInt &amp;a) &#123; <span class="type">int</span> v; os &gt;&gt; v; a = <span class="built_in">ModInt</span>(v); <span class="keyword">return</span> os;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ModInt <span class="title">pow</span><span class="params">(<span class="type">int</span> n)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="function">ModInt <span class="title">res</span><span class="params">(<span class="number">1</span>)</span>, <span class="title">mul</span><span class="params">(x)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &amp; <span class="number">1</span>) res *= mul;</span><br><span class="line">            mul *= mul;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ModInt <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> a = x, b = mod, u = <span class="number">1</span>, v = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (b) &#123;</span><br><span class="line">            <span class="type">int</span> t = a / b;</span><br><span class="line">            a -= t * b; <span class="built_in">swap</span>(a, b);</span><br><span class="line">            u -= t * v; <span class="built_in">swap</span>(u, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u &lt; <span class="number">0</span>) u += mod;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> mint = ModInt&lt;mod&gt;;</span><br></pre></td></tr></table></figure><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;T&gt; tr;</span><br><span class="line">    <span class="built_in">fenwick</span>(<span class="type">int</span> n): <span class="built_in">n</span>(n) &#123;tr.<span class="built_in">resize</span>(n);&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">        T res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (++ pos; pos &gt;= <span class="number">1</span>; pos -= <span class="built_in">lowbit</span>(pos)) &#123;</span><br><span class="line">            res += tr[pos];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> pos, T val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (++ pos; pos &lt;= n; pos += <span class="built_in">lowbit</span>(pos)) &#123;</span><br><span class="line">            tr[pos] += val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="字符串-双-哈希"><a href="#字符串-双-哈希" class="headerlink" title="字符串(双)哈希"></a>字符串(双)哈希</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="type">hash_t</span> = array&lt;<span class="type">int</span>, <span class="number">2</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod0 = <span class="number">1e9</span> + <span class="number">7</span>, mod1 = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"><span class="type">hash_t</span> base = &#123;<span class="number">13331</span>, <span class="number">23333</span>&#125;;</span><br><span class="line"><span class="type">hash_t</span> pw[N];</span><br><span class="line"><span class="type">hash_t</span> <span class="keyword">operator</span> + (<span class="type">hash_t</span> a, <span class="type">hash_t</span> b) &#123;</span><br><span class="line">    <span class="type">hash_t</span> res = &#123;(a[<span class="number">0</span>] + b[<span class="number">0</span>]) % mod0, (a[<span class="number">1</span>] + b[<span class="number">1</span>]) % mod1&#125;;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">hash_t</span> <span class="keyword">operator</span> - (<span class="type">hash_t</span> a, <span class="type">hash_t</span> b) &#123;</span><br><span class="line">    <span class="type">hash_t</span> res = &#123;(a[<span class="number">0</span>] - b[<span class="number">0</span>] + mod0) % mod0, (a[<span class="number">1</span>] - b[<span class="number">1</span>] + mod1) % mod1&#125;;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">hash_t</span> <span class="keyword">operator</span> * (<span class="type">hash_t</span> a, <span class="type">hash_t</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;a[<span class="number">0</span>] * b[<span class="number">0</span>] % mod0, a[<span class="number">1</span>] * b[<span class="number">1</span>] % mod1&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pw[<span class="number">0</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; ++ i) &#123;</span><br><span class="line">    pw[i] = pw[i - <span class="number">1</span>] * base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; ++ i) &#123;</span><br><span class="line">    pre[i] = pre[i - <span class="number">1</span>] * base + <span class="type">hash_t</span>&#123;s[i], s[i]&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span> * n; i &gt;= <span class="number">1</span>; -- i) &#123;</span><br><span class="line">    suf[i] = suf[i + <span class="number">1</span>] * base + <span class="type">hash_t</span>&#123;s[i], s[i]&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志:"></a>更新日志:</h2><p>2023.01.18: </p><p>加入计数模板 + 字符串双哈希模板</p><p>2023.02.06: </p><p>加入朴素fenwick模板</p><p>等cf上1500 / atcoder上青名, 就着手构建自己的library</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;FOR-MORE&quot;&gt;&lt;a href=&quot;#FOR-MORE&quot; class=&quot;headerlink&quot; title=&quot;FOR MORE&quot;&gt;&lt;/a&gt;FOR MORE&lt;/h1&gt;&lt;p&gt;Please refer to &lt;a href=&quot;https://lcj2021.githu</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记_模板" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>题解 - Educational Round 142 (Div. 2) A-D</title>
    <link href="http://example.com/2023/02/02/%E9%A2%98%E8%A7%A3%20-%20Educational%20Round%20142%20(Div.%202)%20A-D/"/>
    <id>http://example.com/2023/02/02/%E9%A2%98%E8%A7%A3%20-%20Educational%20Round%20142%20(Div.%202)%20A-D/</id>
    <published>2023-02-01T16:00:00.000Z</published>
    <updated>2023-02-06T13:55:56.070Z</updated>
    
    <content type="html"><![CDATA[<p>C题洗澡的时候想了挺久, 还是想出正解了. 并且D题属于一眼Trie, 但是不太会倒映射.</p><p>6号中午做了一下B, 是那种讨论题. 虽说只有1200分, 但我还是WA了2发, 并且花了半个小时. 是真的难顶. </p><h2 id="B-Stand-up-Comedian"><a href="#B-Stand-up-Comedian" class="headerlink" title="B. Stand-up Comedian"></a><a href="https://codeforces.com/contest/1792/problem/B">B. Stand-up Comedian</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>Stand-up Comedian: 单口相声演员</p><p>有四种类型的笑话：</p><blockquote><p>第一种: 使AB的情绪都 +1</p><p>第二种: 使A的情绪 +1, B的情绪-1</p><p>第三种: 使A的情绪 -1, B的情绪+1</p><p>第四种会使AB的情绪都-1</p></blockquote><p>两人的情绪初始为0. 求在AB中某一人情绪降至0时可以讲的最大笑话数</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>又犯了经典错误之 <code>b -= min(b, c);   c -= min(b, c);</code>. </p><p>第一种类型直接加上</p><p>所以 ans += a</p><p>第二种类型和第三种类型交替使用. </p><p>所以 ans += min(b, c)</p><p>最后时刻, 最后一类和剩下的第二第三类地位等价. </p><p>所以 ans += min(a + 1, b + c + d)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c, d; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    <span class="type">int</span> ans = a;</span><br><span class="line">    <span class="keyword">if</span> (a) &#123;</span><br><span class="line">        <span class="type">int</span> dec = <span class="built_in">min</span>(b, c);</span><br><span class="line">        ans += dec * <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// b -= min(b, c);</span></span><br><span class="line">        <span class="comment">// c -= min(b, c);</span></span><br><span class="line">        b -= dec;</span><br><span class="line">        c -= dec;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">LOG</span>(a, b, c, d)</span><br><span class="line">    <span class="comment">// 此时 bc与d的地位等价</span></span><br><span class="line">    ans += <span class="built_in">min</span>(a + <span class="number">1</span>, b + c + d);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Min-Max-Sort"><a href="#C-Min-Max-Sort" class="headerlink" title="C. Min Max Sort"></a><a href="https://codeforces.com/contest/1792/problem/C">C. Min Max Sort</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>一个排列p, 每次可以选两个数x和y, 将两者较小的移到开头, 较大的移到</p><p>最后时刻, 最后一类和剩下的第二第三类地位等价结尾.. </p><p>问排成增序所需最小操作次数.</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>首先可以确定操作次数上限是n/2, 即(n/2, n/2+1)…(1, n).</p><p>接下来再看怎么样能少操作几次.</p><p>例子: 1 6 3 4 2 5. (3, 4)一开始就挨在一起了, 并且是(3, 4)而不是(4, 3), 所以可以省略掉这一步, 直接考虑(2, 5). 发现(2, 5)并不分别位于(2, 3)的左右两侧. 所以这一步是必不可少的操作</p><p>如果情况是 1 2 3 4 6 5, 那么(3, 4)和(2, 5)都可以省略了. 只需要做一次(1, 6)操作就行.</p><p>结论就是 (n/2, n/2+1) 在最中间, 然后n/2-1, n/2+2分别位于(n/2, n/2+1)左右两侧, 如果某对逆序了, 或者没有位于两侧, 那么接下来的操作都不能省略.</p><p>用pos记下每个数的位置, l, r记录上一对数对的位置(注意n为奇数的情况, 此时中间只有一个数, 所以l = r) 然后从中间开始枚举, 依次判断数对的相对位置就行.</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;  cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pos</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];   a[i] --;</span><br><span class="line">        pos[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">LOG</span>(a)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4: </span></span><br><span class="line">    <span class="comment">// 0 1 2 3</span></span><br><span class="line">    <span class="comment">// 5: 2</span></span><br><span class="line">    <span class="comment">// 0 1 2 3 4</span></span><br><span class="line">    <span class="type">int</span> ans = n / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> l = pos[n / <span class="number">2</span>], r = pos[n / <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; n / <span class="number">2</span>; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> v1 = (n - <span class="number">2</span>) / <span class="number">2</span> - i, v2 = n - <span class="number">1</span> - v1;</span><br><span class="line">        <span class="built_in">LOG</span>(v1, v2)</span><br><span class="line">        <span class="type">int</span> p1 = pos[v1], p2 = pos[v2];</span><br><span class="line">        <span class="keyword">if</span> (p1 &gt; p2 || !(p1 &lt;= l &amp;&amp; p2 &gt;= r)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        l = p1, r = p2;</span><br><span class="line">    &#125;</span><br><span class="line">    ans -= i;</span><br><span class="line">    <span class="built_in">LOG</span>(ans)</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Fixed-Prefix-Permutations"><a href="#D-Fixed-Prefix-Permutations" class="headerlink" title="D. Fixed Prefix Permutations"></a><a href="https://codeforces.com/contest/1792/problem/D">D. Fixed Prefix Permutations</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给定 n 个 1<del>m 的排列a[1</del>n].</p><p>定义一个排列的分值为: 最大的满足 p1=1,p2=2,….,pk=k 的 k .</p><p>定义两个排列 p,q 的乘积 p×q=r 为 r[j]=q[p[j]].</p><p>对于每个排列a[i], 求出它乘以所有这 n 个排列a[j]能得到的最大分值.</p><p>最后时刻, 最后一类和剩下的第二第三类地位等价. </p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>学习(偷)了日本大神maspy的Trie板子.</p><p>固定的a[i], 记为p. a[j], 记为q. r[i] = q[p[i]] = i</p><p>q[p[i]] = i. 两边同时取q^-1, 也就是取pos_q. </p><p>p[i] = pos_q[i] = i. 也就是找p[i]和所有pos_q[i]最长的公共前缀. 只需要把所有的pos_q建一个Trie. 然后每次查询p[i]时, 在pos_q中找最长公共前缀的长度就行. </p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;   cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector <span class="title">p</span><span class="params">(n, vector&lt;<span class="type">int</span>&gt;(m))</span></span>;</span><br><span class="line">    <span class="function">vector <span class="title">pos</span><span class="params">(n, vector&lt;<span class="type">int</span>&gt;(m))</span></span>;</span><br><span class="line">    Trie&lt;<span class="number">10</span>&gt; tr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++ j) &#123;</span><br><span class="line">            cin &gt;&gt; p[i][j];     p[i][j] --;</span><br><span class="line">            pos[i][p[i][j]] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tr.add&lt;vector&lt;<span class="type">int</span>&gt;&gt;(pos[i], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">LOG</span>(pos[i])</span><br><span class="line">        <span class="type">int</span> cv = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++ j) &#123;</span><br><span class="line">            cv = tr.TO[cv][p[i][j]];</span><br><span class="line">            <span class="built_in">LOG</span>(cv)</span><br><span class="line">            <span class="keyword">if</span> (cv == <span class="number">-1</span>)   <span class="keyword">break</span>;</span><br><span class="line">            ++ cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; cnt &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Min-Max-Sort-1"><a href="#C-Min-Max-Sort-1" class="headerlink" title="C. Min Max Sort"></a><a href="https://codeforces.com/contest/1792/problem/C">C. Min Max Sort</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C题洗澡的时候想了挺久, 还是想出正解了. 并且D题属于一眼Trie, 但是不太会倒映射.&lt;/p&gt;
&lt;p&gt;6号中午做了一下B, 是那种讨论题. 虽说只有1200分, 但我还是WA了2发, 并且花了半个小时. 是真的难顶. &lt;/p&gt;
&lt;h2 id=&quot;B-Stand-up-Co</summary>
      
    
    
    
    <category term="题解" scheme="http://example.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法_数据结构" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法_字符串" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="算法_构造" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95-%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>题解 - Codeforces Round 848 (Div. 2) A-D</title>
    <link href="http://example.com/2023/02/02/%E9%A2%98%E8%A7%A3%20-%20Codeforces%20Round%20848%20(Div.%202)%20A-D/"/>
    <id>http://example.com/2023/02/02/%E9%A2%98%E8%A7%A3%20-%20Codeforces%20Round%20848%20(Div.%202)%20A-D/</id>
    <published>2023-02-01T16:00:00.000Z</published>
    <updated>2023-02-02T08:04:42.881Z</updated>
    
    <content type="html"><![CDATA[<p>比赛次日早上做的题, 50min内能出ABC, 感觉前面题目不难.</p><p>补题: D期望dp, 期望公式dp[i]依赖于dp[i-1]和dp[i+1], 每一项dp都用k*dp[1]+b的形式表示. 递推到最后一项dp[n]=dp[n-1]+1. 从而求出dp[1]</p><h2 id="A-Parallel-Projection"><a href="#A-Parallel-Projection" class="headerlink" title="A. Parallel Projection"></a><a href="https://codeforces.com/contest/1782/problem/A">A. Parallel Projection</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定由 1 和 -1 组成的数组，你必须选择两个相邻元素，然后翻转它们的符号。</p><p>求翻转后数组的最大和。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>对于相邻的2个数, 总共3种情况: </p><ol><li>(-1, -1)             总贡献 +4</li><li>(-1, 1) / (1, -1)    总贡献 0</li><li>只有(1, 1)           总贡献 -4</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;  cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;x : a)  cin &gt;&gt; x;</span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">accumulate</span>(<span class="built_in">all</span>(a), <span class="number">0</span>);</span><br><span class="line">    <span class="type">bool</span> add0 = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; n &amp;&amp; a[i] == <span class="number">-1</span> &amp;&amp; a[i + <span class="number">1</span>] == <span class="number">-1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; ans + <span class="number">4</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; n &amp;&amp; a[i] * a[i + <span class="number">1</span>] == <span class="number">-1</span>) &#123;</span><br><span class="line">            add0 = <span class="literal">true</span>;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (add0)   cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span>        cout &lt;&lt; ans - <span class="number">4</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-The-Forbidden-Permutation"><a href="#B-The-Forbidden-Permutation" class="headerlink" title="B. The Forbidden Permutation"></a><a href="https://codeforces.com/contest/1778/problem/B">B. The Forbidden Permutation</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定排列 p 和数组 a和正整数d. </p><p>定义a是不好数组, 如果对于所有a[1~m-1], 都有pos[a[i]] &lt; pos[a[i+1]] &lt;= pos[a[i]] + d</p><p>比如: p=[4,2,1,3,6,5] 和 d=2</p><blockquote><p>a=[2,3,6] is a not good array.<br>a=[2,6,5] is good because pos(a1)=2, pos(a2)=5, so the condition pos(a2)≤pos(a1)+d is not satisfied.<br>a=[1,6,3] is good because pos(a2)=5, pos(a3)=4, so the condition pos(a2)&lt;pos(a3) is not satisfied.</p></blockquote><p>请多次交换排列p中相邻的元素，使得a变成好数组</p><p>求最少交换次数。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>要破坏现有满足的2个条件, 只需要破坏其中一个条件就行. </p><p>枚举每个数, 分别计算破坏左边不等式和右边不等式的代价. 取个min就行</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, d;    cin &gt;&gt; n &gt;&gt; m &gt;&gt; d;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(n)</span>, <span class="title">a</span><span class="params">(m)</span>, <span class="title">pos</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; p[i];    p[i] --;</span><br><span class="line">        pos[p[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;&amp;x : a)  cin &gt;&gt; x, x --;</span><br><span class="line">    <span class="type">int</span> ans = n;</span><br><span class="line">    <span class="built_in">LOG</span>(a)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; m; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> x = a[i], y = a[i + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> px = pos[x], py = pos[y];</span><br><span class="line">        <span class="keyword">if</span> (px + n - <span class="number">1</span> - py &gt;= d - (py - px) + <span class="number">1</span>)   ans = <span class="built_in">min</span>(ans, <span class="built_in">max</span>(d - (py - px) + <span class="number">1</span>, (<span class="type">int</span>)<span class="number">0</span>));</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, <span class="built_in">max</span>(py - px, (<span class="type">int</span>)<span class="number">0</span>));</span><br><span class="line">    &#125; <span class="built_in">LOG</span>(ans)</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Flexible-String"><a href="#C-Flexible-String" class="headerlink" title="C. Flexible String"></a><a href="https://codeforces.com/contest/1778/problem/C">C. Flexible String</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>现有字符串 a,b 。请选择修改 a 中至多 k 种 字符，对于 每一个 这样的字符，都可以将其改为另一个其他字符。</p><p>求修改后 a’ 的子串以及 b 的子串中，满足 a’[l..r] = b[l..r] 的数量的最大值。保证 a 中至多有 10 种字符。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>n(1e5), k(10). </p><p>暴力二进制枚举子集, 最高O(2^10 * 1e5), 2s能接受. </p><p>枚举每个子集, 对于a[i], 若是子集里的字母, 都替换成b[i]</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1024 * 1e5 2s 应该能过</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;   cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    string a, b;    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    string unique_a = a;</span><br><span class="line">    <span class="built_in">uniq</span>(unique_a);</span><br><span class="line">    <span class="type">int</span> m = unique_a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">LOG</span>(unique_a, m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (k &gt;= m) &#123;</span><br><span class="line">        cout &lt;&lt; n * (n + <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> val = <span class="number">0</span>; val &lt; (<span class="number">1</span> &lt;&lt; m); ++ val) <span class="keyword">if</span> (<span class="built_in">popcountll</span>(val) == k) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">change</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">0</span>; b &lt; m; ++ b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (val &gt;&gt; b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                change[unique_a[b] - <span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>, curr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (change[a[i] - <span class="string">&#x27;a&#x27;</span>] || a[i] == b[i]) &#123;</span><br><span class="line">                len ++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curr += len * (len + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                len = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (len)    curr += len * (len + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, curr);</span><br><span class="line">    &#125; <span class="built_in">LOG</span>(ans)</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Flexible-String-Revisit"><a href="#D-Flexible-String-Revisit" class="headerlink" title="D. Flexible String Revisit"></a><a href="https://codeforces.com/contest/1778/problem/D">D. Flexible String Revisit</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给定两个二进制串 a, b. </p><p>每次随意翻转一个二进制位，求第一次使得 a=b 所需的期望次数。</p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>设有 i 个二进制位不同的情况下，所需的次数是 dp[i] ，则有转移方程：</p><p><code>dp[i] = 1 + dp[i + 1] * (n - i) / n + dp[i - 1] * (i) / n</code></p><p>其含义是，我们进行一次翻转后，有 i/n 的概率减少一个不同的位，这样就还需要 dp[i−1] 次；其他情况下将增加一个不同的位，则还需要 dp[i+1] 次。特别地， dp[0]=0， dp[n]=1+dp[n−1]</p><p>但是(しかし), 期望公式dp[i]依赖于dp[i-1]和dp[i+1]. 而我们的初始状态只有dp[0]=0. 因此需要通过解方程的方式才能得到答案</p><p>$$<br>dp[i] = 1 + dp[i + 1] * (n - i) / n + dp[i - 1] * (i) / n \ </p><p>dp[i - 1] = 1 + dp[i] * (n - i + 1) / n + dp[i - 2] * (i - 1) / n \ </p><p>dp[i - 1] = 1 + dp[i] * (1 - (i-1) / n) + dp[i - 2] * (i - 1) / n   \ </p><p>dp[i] = (dp[i-1] - 1 - dp[i-2] * (i-1) / n) / (1 - (i-1)/n) \<br>$$</p><p>dp[2] = dp[1] + … = k * dp[1] + b</p><p>用 dp[1] 看作已知，各个 dp[i] 表示为k * dp[1] + b. </p><p>一直到 dp[n] = 1 + dp[n - 1]</p><p>dp[n] - dp[n - 1] = k * dp[1] + b = 1, 这里的k和b都是已经通过递推算出来的, 所以dp[1]的值也就算出来了.</p><p>答案就是<code>dp[diff_cnt][0] * dp[1] + dp[diff_cnt][1]</code></p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">array&lt;mint, 2&gt; <span class="keyword">operator</span>-(array&lt;mint, <span class="number">2</span>&gt; a, array&lt;mint, <span class="number">2</span>&gt; b) &#123;</span><br><span class="line"><span class="keyword">return</span> array&lt;mint, <span class="number">2</span>&gt; &#123;a[<span class="number">0</span>]-b[<span class="number">0</span>], a[<span class="number">1</span>]-b[<span class="number">1</span>]&#125;;</span><br><span class="line">&#125;</span><br><span class="line">array&lt;mint, 2&gt; <span class="keyword">operator</span>-(array&lt;mint, <span class="number">2</span>&gt; a, mint b) &#123;</span><br><span class="line"><span class="keyword">return</span> array&lt;mint, <span class="number">2</span>&gt; &#123;a[<span class="number">0</span>], a[<span class="number">1</span>]-b&#125;;</span><br><span class="line">&#125;</span><br><span class="line">array&lt;mint, 2&gt; <span class="keyword">operator</span>*(array&lt;mint, <span class="number">2</span>&gt; a, mint b) &#123;</span><br><span class="line"><span class="keyword">return</span> array&lt;mint, <span class="number">2</span>&gt; &#123;a[<span class="number">0</span>]*b, a[<span class="number">1</span>]*b&#125;;</span><br><span class="line">&#125;</span><br><span class="line">array&lt;mint, 2&gt; <span class="keyword">operator</span>/(array&lt;mint, <span class="number">2</span>&gt; a, mint b) &#123;</span><br><span class="line"><span class="keyword">return</span> array&lt;mint, <span class="number">2</span>&gt; &#123;a[<span class="number">0</span>]/b, a[<span class="number">1</span>]/b&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;          cin &gt;&gt; n;</span><br><span class="line">    string a, b;    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="type">int</span> diff = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)    diff += (a[i] != b[i]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dp[i]: 有i个不同之处的期望: dp[i][0] * dp[1] + dp[i][1]</span></span><br><span class="line">    vector&lt;array&lt;mint, 2&gt;&gt; <span class="built_in">dp</span>(n + <span class="number">1</span>);   </span><br><span class="line">    dp[<span class="number">0</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    dp[<span class="number">1</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dp[i] = 1 + dp[i + 1] * (n - i) / n + dp[i - 1] * (i) / n</span></span><br><span class="line">    <span class="comment">// dp[i - 1] = 1 + dp[i] * (n - i + 1) / n + dp[i - 2] * (i - 1) / n</span></span><br><span class="line">    <span class="comment">// dp[i - 1] = 1 + dp[i] * (1 - (i-1) / n) + dp[i - 2] * (i - 1) / n</span></span><br><span class="line">    <span class="comment">// dp[i] = (dp[i-1] - 1 - dp[i-2] * (i-1) / n) / (1 - (i-1)/n)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        dp[i] = (dp[i<span class="number">-1</span>] - <span class="built_in">mint</span>(<span class="number">1</span>) - dp[i<span class="number">-2</span>] * <span class="built_in">mint</span>(i<span class="number">-1</span>) / <span class="built_in">mint</span>(n)) / (<span class="built_in">mint</span>(<span class="number">1</span>) - <span class="built_in">mint</span>(i<span class="number">-1</span>)/<span class="built_in">mint</span>(n));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dp[n] = 1 + dp[n - 1]</span></span><br><span class="line">    <span class="comment">// dp[n] - dp[n - 1] = d[0] * dp[1][0] + d[1] = 1</span></span><br><span class="line">    <span class="comment">// k = dp[1][0] = (1 - d[1]) / d[0]</span></span><br><span class="line">    array&lt;mint, 2&gt; d = dp[n] - dp[n - <span class="number">1</span>];</span><br><span class="line">    mint k = (<span class="built_in">mint</span>(<span class="number">1</span>) - d[<span class="number">1</span>]) / d[<span class="number">0</span>];</span><br><span class="line">    cout &lt;&lt; dp[diff][<span class="number">0</span>] * k + dp[diff][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="A-Flip-Flop-Sum"><a href="#A-Flip-Flop-Sum" class="headerlink" title="A. Flip Flop Sum"></a><a href="https://codeforces.com/contest/1778/problem/A">A. Flip Flop Sum</a></h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;比赛次日早上做的题, 50min内能出ABC, 感觉前面题目不难.&lt;/p&gt;
&lt;p&gt;补题: D期望dp, 期望公式dp[i]依赖于dp[i-1]和dp[i+1], 每一项dp都用k*dp[1]+b的形式表示. 递推到最后一项dp[n]=dp[n-1]+1. 从而求出dp[1]</summary>
      
    
    
    
    <category term="题解" scheme="http://example.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法_暴力" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95-%E6%9A%B4%E5%8A%9B/"/>
    
    <category term="算法_数学" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95-%E6%95%B0%E5%AD%A6/"/>
    
    <category term="算法_概率期望" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95-%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
</feed>
